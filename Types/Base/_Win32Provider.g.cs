/**************************************************************
 *                                                            *
 *   WARNING: This file is autogenerated by                   *
 *   System.Management.Generator.                             *
 *   Any changes made to this file will be overwritten.       *
 *                                                            *
 **************************************************************/
#nullable enable
namespace System.Management.Types.Base;

public partial record class _Win32Provider(ManagementObject ManagementObject) : _Object(ManagementObject)
{
    /// <summary>
    /// Class identifier that WMI uses to determine whether or not to load a high performance provider into the client process or the WMI process. If both the provider and client are located on the same computer, WMI loads the provider in-process to the client by using ClientLoadableCLSID as the class identifier. When the provider and client are located on different computers, WMI loads the provider in-process to WMI. WMI also uses ClientLoadableCLSID to support refresh operations.
    /// </summary>
    public string? ClientLoadableCLSID => (string)ManagementObject[nameof(ClientLoadableCLSID)];
    /// <summary>
    /// GUID that represents the class identifier (CLSID) of the provider COM object. This COM object must contain an implementation of the IWbemProviderInit interface.
    /// </summary>
    public string? CLSID => (string)ManagementObject[nameof(CLSID)];
    /// <summary>
    /// Not used.
    /// </summary>
    public int? Concurrency => (int?)ManagementObject[nameof(Concurrency)];
    /// <summary>
    /// Identifies the computer on which to start the provider. If the provider runs on the local computer it is NULL.
    /// </summary>
    public string? DefaultMachineName => (string)ManagementObject[nameof(DefaultMachineName)];
    /// <summary>
    /// If TRUE, this instance is enabled and can be used to complete client requests.
    /// </summary>
    public bool? Enabled => (bool?)ManagementObject[nameof(Enabled)];
    /// <summary>
    /// This property is composed of values from the MSFT_Providers HostingGroup and HostingSpecification properties. The value of this property specifies how WMI loads the provider and the security account it runs under. For more information about setting the HostingModel property, see Provider Hosting and Security and Registering a Provider.
    /// </summary>
    public string? HostingModel => (string)ManagementObject[nameof(HostingModel)];
    /// <summary>
    /// Reserved. The default value is zero (0).
    /// </summary>
    public int? ImpersonationLevel => (int?)ManagementObject[nameof(ImpersonationLevel)];
    /// <summary>
    /// Set of flags that provide information about serialization. The default value is zero (0).
    /// </summary>
    public int? InitializationReentrancy => (int?)ManagementObject[nameof(InitializationReentrancy)];
    /// <summary>
    /// Not used.
    /// </summary>
    public DateTimeOffset? InitializationTimeoutInterval => ManagementObject.GetDateTimePropertyValue(nameof(InitializationTimeoutInterval));
    /// <summary>
    /// TBD
    /// </summary>
    public bool? InitializeAsAdminFirst => (bool?)ManagementObject[nameof(InitializeAsAdminFirst)];
    /// <summary>
    /// The provider name.
    /// </summary>
    public string? Name => (string)ManagementObject[nameof(Name)];
    /// <summary>
    /// Not used.
    /// </summary>
    public DateTimeOffset? OperationTimeoutInterval => ManagementObject.GetDateTimePropertyValue(nameof(OperationTimeoutInterval));
    /// <summary>
    /// If TRUE, the provider is initialized for each locale when a user connects to the same namespace more than one time using different locales. The default value is FALSE.
    /// </summary>
    public bool? PerLocaleInitialization => (bool?)ManagementObject[nameof(PerLocaleInitialization)];
    /// <summary>
    /// If TRUE, the provider is initialized one time for each NT LAN Manager (NTLM) user that makes requests to the provider. If FALSE (default), the provider is initialized one time for all users.
    /// </summary>
    public bool? PerUserInitialization => (bool?)ManagementObject[nameof(PerUserInitialization)];
    public bool? Pure => (bool?)ManagementObject[nameof(Pure)];
    /// <summary>
    /// WMI performs access checks for decoupled providers that use the IWbemProviderInit and IWbemObjectSink interfaces. If the security descriptor is NULL, then only applications or services that run under the LocalSystem, NetworkService, LocalService accounts can run a decoupled provider.
    /// </summary>
    public string? SecurityDescriptor => (string)ManagementObject[nameof(SecurityDescriptor)];
    /// <summary>
    /// Not used.
    /// </summary>
    public bool? SupportsExplicitShutdown => (bool?)ManagementObject[nameof(SupportsExplicitShutdown)];
    /// <summary>
    /// Not used.
    /// </summary>
    public bool? SupportsExtendedStatus => (bool?)ManagementObject[nameof(SupportsExtendedStatus)];
    /// <summary>
    /// Not used.
    /// </summary>
    public bool? SupportsQuotas => (bool?)ManagementObject[nameof(SupportsQuotas)];
    /// <summary>
    /// Not used.
    /// </summary>
    public bool? SupportsSendStatus => (bool?)ManagementObject[nameof(SupportsSendStatus)];
    /// <summary>
    /// Not used.
    /// </summary>
    public bool? SupportsShutdown => (bool?)ManagementObject[nameof(SupportsShutdown)];
    /// <summary>
    /// Not used.
    /// </summary>
    public bool? SupportsThrottling => (bool?)ManagementObject[nameof(SupportsThrottling)];
    /// <summary>
    /// Date and Time Format that specifies how long WMI allows the provider to remain idle before it is unloaded. Typically, providers request that WMI wait no longer than five minutes.
    /// </summary>
    public DateTimeOffset? UnloadTimeout => ManagementObject.GetDateTimePropertyValue(nameof(UnloadTimeout));
    /// <summary>
    /// Version of the provider. The supported versions are 1 and 2. Version 2 strengthens validity checks for all associated property registrations, specifically the ImpersonationLevel property.
    /// </summary>
    public uint? Version => (uint?)ManagementObject[nameof(Version)];
}
