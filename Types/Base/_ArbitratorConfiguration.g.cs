/**************************************************************
 *                                                            *
 *   WARNING: This file is autogenerated by                   *
 *   System.Management.Generator.                             *
 *   Any changes made to this file will be overwritten.       *
 *                                                            *
 **************************************************************/
#nullable enable
namespace System.Management.Types.Base;

public partial record class _ArbitratorConfiguration(ManagementObject ManagementObject) : _SystemClass(ManagementObject)
{
    /// <summary>
    /// Unused. Total number of outstanding tasks at any time.
    /// </summary>
    public uint? OutstandingTasksTotal => (uint?)ManagementObject[nameof(OutstandingTasksTotal)];
    /// <summary>
    /// Unused. Number of outstanding user initiated tasks at any one time.
    /// </summary>
    public uint? OutstandingTasksPerUser => (uint?)ManagementObject[nameof(OutstandingTasksPerUser)];
    /// <summary>
    /// Unused. Maximum number of task threads.
    /// </summary>
    public uint? TaskThreadsTotal => (uint?)ManagementObject[nameof(TaskThreadsTotal)];
    /// <summary>
    /// Unused. Maximum number of task threads associated with a particular user t any one time.
    /// </summary>
    public uint? TaskThreadsPerUser => (uint?)ManagementObject[nameof(TaskThreadsPerUser)];
    /// <summary>
    /// Unused. Number of quota violations permitted before a task is canceled.
    /// </summary>
    public uint? QuotaRetryCount => (uint?)ManagementObject[nameof(QuotaRetryCount)];
    /// <summary>
    /// Unused. Delay introduced into the task execution on each quota violation.
    /// </summary>
    public uint? QuotaRetryWaitInterval => (uint?)ManagementObject[nameof(QuotaRetryWaitInterval)];
    /// <summary>
    /// Unused. Maximum number of connected users.
    /// </summary>
    public uint? TotalUsers => (uint?)ManagementObject[nameof(TotalUsers)];
    /// <summary>
    /// Unused. Total memory cache associated with a particular task at any one time.
    /// </summary>
    public uint? TotalCacheMemoryPerTask => (uint?)ManagementObject[nameof(TotalCacheMemoryPerTask)];
    /// <summary>
    /// Unused. Total memory cache associated with a particular user at anyone time.
    /// </summary>
    public uint? TotalCacheMemoryPerUser => (uint?)ManagementObject[nameof(TotalCacheMemoryPerUser)];
    /// <summary>
    /// Unused. Total memory cache associated with all users at any one time.
    /// </summary>
    public uint? TotalCacheMemory => (uint?)ManagementObject[nameof(TotalCacheMemory)];
    /// <summary>
    /// Unused. Total disk cache associated with a particular task at any one time.
    /// </summary>
    public uint? TotalCacheDiskPerTask => (uint?)ManagementObject[nameof(TotalCacheDiskPerTask)];
    /// <summary>
    /// Unused. Total disk cache associated with a particular user at any one time.
    /// </summary>
    public uint? TotalCacheDiskPerUser => (uint?)ManagementObject[nameof(TotalCacheDiskPerUser)];
    /// <summary>
    /// Unused. Total disk cache associated with all users at any one time.
    /// </summary>
    public uint? TotalCacheDisk => (uint?)ManagementObject[nameof(TotalCacheDisk)];
    /// <summary>
    /// Number of temporary subscriptions allowed for a particular user at any one time.
    /// </summary>
    public uint? TemporarySubscriptionsPerUser => (uint?)ManagementObject[nameof(TemporarySubscriptionsPerUser)];
    /// <summary>
    /// Number of permanent subscriptions allowed for a particular user at any one time.
    /// </summary>
    public uint? PermanentSubscriptionsPerUser => (uint?)ManagementObject[nameof(PermanentSubscriptionsPerUser)];
    /// <summary>
    /// Number of polling event queries allowed for a particular user at any one time.
    /// </summary>
    public uint? PollingInstructionsPerUser => (uint?)ManagementObject[nameof(PollingInstructionsPerUser)];
    /// <summary>
    /// Amount of memory polling event queries, issued by a particular user, can consume at any one time.
    /// </summary>
    public uint? PollingMemoryPerUser => (uint?)ManagementObject[nameof(PollingMemoryPerUser)];
    /// <summary>
    /// Total number of temporary subscriptions allowed for all users at any one time.
    /// </summary>
    public uint? TemporarySubscriptionsTotal => (uint?)ManagementObject[nameof(TemporarySubscriptionsTotal)];
    /// <summary>
    /// Total number of permanent subscriptions allowed for all users at any one time.
    /// </summary>
    public uint? PermanentSubscriptionsTotal => (uint?)ManagementObject[nameof(PermanentSubscriptionsTotal)];
    /// <summary>
    /// Total number of polling instructions allowed for all users at any one time.
    /// </summary>
    public uint? PollingInstructionsTotal => (uint?)ManagementObject[nameof(PollingInstructionsTotal)];
    /// <summary>
    /// Total amount of memory that polling event queries, for all users combined, can consumer at any one time.
    /// </summary>
    public uint? PollingMemoryTotal => (uint?)ManagementObject[nameof(PollingMemoryTotal)];
}
