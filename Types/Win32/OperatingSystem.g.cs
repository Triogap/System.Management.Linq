/**************************************************************
 *                                                            *
 *   WARNING: This file is autogenerated by                   *
 *   System.Management.Generator.                             *
 *   Any changes made to this file will be overwritten.       *
 *                                                            *
 **************************************************************/
#nullable enable
namespace System.Management.Types.Win32;

public partial record class OperatingSystem(ManagementObject ManagementObject) : CIM.OperatingSystem(ManagementObject)
{
    /// <summary>
    /// Name of the disk drive from which the Windows operating system starts.
    /// </summary>
    public string? BootDevice => (string)ManagementObject[nameof(BootDevice)];
    /// <summary>
    /// Build number of an operating system. It can be used for more precise version information than product release version numbers.
    /// </summary>
    public string? BuildNumber => (string)ManagementObject[nameof(BuildNumber)];
    /// <summary>
    /// Type of build used for an operating system.
    /// </summary>
    public string? BuildType => (string)ManagementObject[nameof(BuildType)];
    /// <summary>
    /// Code page value an operating system uses. A code page contains a character table that an operating system uses to translate strings for different languages. The American National Standards Institute (ANSI) lists values that represent defined code pages. If an operating system does not use an ANSI code page, this member is set to 0 (zero). The CodeSet string can use a maximum of six characters to define the code page value.
    /// </summary>
    public string? CodeSet => (string)ManagementObject[nameof(CodeSet)];
    /// <summary>
    /// Code for the country/region that an operating system uses. Values are based on international phone dialing prefixesâ€”also referred to as IBM country/region codes. This property can use a maximum of six characters to define the country/region code value.
    /// </summary>
    public string? CountryCode => (string)ManagementObject[nameof(CountryCode)];
    /// <summary>
    /// NULL-terminated string that indicates the latest service pack installed on a computer. If no service pack is installed, the string is NULL.
    /// </summary>
    public string? CSDVersion => (string)ManagementObject[nameof(CSDVersion)];
    /// <summary>
    /// Data execution prevention is a hardware feature to prevent buffer overrun attacks by stopping the execution of code on data-type memory pages. If True, then this feature is available. On 64-bit computers, the data execution prevention feature is configured in the BCD store and the properties in Win32_OperatingSystem are set accordingly.
    /// </summary>
    public bool? DataExecutionPrevention_Available => (bool?)ManagementObject[nameof(DataExecutionPrevention_Available)];
    /// <summary>
    /// When the data execution prevention hardware feature is available, this property indicates that the feature is set to work for 32-bit applications if True. On 64-bit computers, the data execution prevention feature is configured in the Boot Configuration Data (BCD) store and the properties in Win32_OperatingSystem are set accordingly.
    /// </summary>
    public bool? DataExecutionPrevention_32BitApplications => (bool?)ManagementObject[nameof(DataExecutionPrevention_32BitApplications)];
    /// <summary>
    /// When the data execution prevention hardware feature is available, this property indicates that the feature is set to work for drivers if True. On 64-bit computers, the data execution prevention feature is configured in the BCD store and the properties in Win32_OperatingSystem are set accordingly.
    /// </summary>
    public bool? DataExecutionPrevention_Drivers => (bool?)ManagementObject[nameof(DataExecutionPrevention_Drivers)];
    /// <summary>
    /// Indicates which Data Execution Prevention (DEP) setting is applied. The DEP setting specifies the extent to which DEP applies to 32-bit applications on the system. DEP is always applied to the Windows kernel.
    /// </summary>
    public byte? DataExecutionPrevention_SupportPolicy => (byte?)ManagementObject[nameof(DataExecutionPrevention_SupportPolicy)];
    /// <summary>
    /// Operating system is a checked (debug) build. If True, the debugging version is installed. Checked builds provide error checking, argument verification, and system debugging code. Additional code in a checked binary generates a kernel debugger error message and breaks into the debugger. This helps immediately determine the cause and location of the error. Performance may be affected in a checked build due to the additional code that is executed.
    /// </summary>
    public bool? Debug => (bool?)ManagementObject[nameof(Debug)];
    /// <summary>
    /// Description of the Windows operating system. Some user interfaces for example, those that allow editing of this description, limit its length to 48 characters.
    /// </summary>
    public string? Description => (string)ManagementObject[nameof(Description)];
    public uint? EncryptionLevel => (uint?)ManagementObject[nameof(EncryptionLevel)];
    /// <summary>
    /// Increase in priority is given to the foreground application. Application boost is implemented by giving an application more execution time slices (quantum lengths).
    /// </summary>
    public byte? ForegroundApplicationBoost => (byte?)ManagementObject[nameof(ForegroundApplicationBoost)];
    /// <summary>
    /// This property is obsolete and not supported.
    /// </summary>
    public uint? LargeSystemCache => (uint?)ManagementObject[nameof(LargeSystemCache)];
    /// <summary>
    /// Language identifier used by the operating system. A language identifier is a standard international numeric abbreviation for a country/region. Each language has a unique language identifier (LANGID), a 16-bit value that consists of a primary language identifier and a secondary language identifier.
    /// </summary>
    public string? Locale => (string)ManagementObject[nameof(Locale)];
    /// <summary>
    /// Name of the operating system manufacturer. For Windows-based systems, this value is "Microsoft Corporation".
    /// </summary>
    public string? Manufacturer => (string)ManagementObject[nameof(Manufacturer)];
    /// <summary>
    /// Multilingual User Interface Pack (MUI Pack ) languages installed on the computer. For example, "en-us". MUI Pack languages are resource files that can be installed on the English version of the operating system. When an MUI Pack is installed, you can change the user interface language to one of 33 supported languages.
    /// </summary>
    public string[]? MUILanguages => (string[])ManagementObject[nameof(MUILanguages)];
    /// <summary>
    /// Stock Keeping Unit (SKU) number for the operating system. These values are the same as the PRODUCT_* constants defined in WinNT.h that are used with the GetProductInfo function.
    /// </summary>
    public uint? OperatingSystemSKU => (uint?)ManagementObject[nameof(OperatingSystemSKU)];
    /// <summary>
    /// Company name for the registered user of the operating system.
    /// </summary>
    public string? Organization => (string)ManagementObject[nameof(Organization)];
    /// <summary>
    /// Architecture of the operating system, as opposed to the processor. This property can be localized.
    /// </summary>
    public string? OSArchitecture => (string)ManagementObject[nameof(OSArchitecture)];
    public uint? OSLanguage => (uint?)ManagementObject[nameof(OSLanguage)];
    /// <summary>
    /// Installed and licensed system product additions to the operating system. For example, the value of 146 (0x92) for OSProductSuite indicates Enterprise, Terminal Services, and Data Center (bits one, four, and seven set). The following list lists possible values.
    /// </summary>
    public uint? OSProductSuite => (uint?)ManagementObject[nameof(OSProductSuite)];
    /// <summary>
    /// If True, the physical address extensions (PAE) are enabled by the operating system running on Intel processors. PAE allows applications to address more than 4 GB of physical memory. When PAE is enabled, the operating system uses three-level linear address translation rather than two-level. Providing more physical memory to an application reduces the need to swap memory to the page file and increases performance. To enable, PAE, use the "/PAE" switch in the Boot.ini file. For more information about the Physical Address Extension feature, see Physical Address Extension.
    /// </summary>
    public bool? PAEEnabled => (bool?)ManagementObject[nameof(PAEEnabled)];
    /// <summary>
    /// Not supported.
    /// </summary>
    public string? PlusProductID => (string)ManagementObject[nameof(PlusProductID)];
    /// <summary>
    /// Not supported.
    /// </summary>
    public string? PlusVersionNumber => (string)ManagementObject[nameof(PlusVersionNumber)];
    /// <summary>
    /// Specifies whether the operating system booted from an external USB device. If true, the operating system has detected it is booting on a supported locally connected storage device.
    /// </summary>
    public bool? PortableOperatingSystem => (bool?)ManagementObject[nameof(PortableOperatingSystem)];
    /// <summary>
    /// Specifies whether this is the primary operating system.
    /// </summary>
    public bool? Primary => (bool?)ManagementObject[nameof(Primary)];
    /// <summary>
    /// Additional system information.
    /// </summary>
    public uint? ProductType => (uint?)ManagementObject[nameof(ProductType)];
    /// <summary>
    /// Name of the registered user of the operating system.
    /// </summary>
    public string? RegisteredUser => (string)ManagementObject[nameof(RegisteredUser)];
    /// <summary>
    /// Operating system product serial identification number.
    /// </summary>
    public string? SerialNumber => (string)ManagementObject[nameof(SerialNumber)];
    /// <summary>
    /// Major version number of the service pack installed on the computer system. If no service pack has been installed, the value is 0 (zero).
    /// </summary>
    public ushort? ServicePackMajorVersion => (ushort?)ManagementObject[nameof(ServicePackMajorVersion)];
    /// <summary>
    /// Minor version number of the service pack installed on the computer system. If no service pack has been installed, the value is 0 (zero).
    /// </summary>
    public ushort? ServicePackMinorVersion => (ushort?)ManagementObject[nameof(ServicePackMinorVersion)];
    /// <summary>
    /// Bit flags that identify the product suites available on the system.
    /// </summary>
    public uint? SuiteMask => (uint?)ManagementObject[nameof(SuiteMask)];
    /// <summary>
    /// Physical disk partition on which the operating system is installed.
    /// </summary>
    public string? SystemDevice => (string)ManagementObject[nameof(SystemDevice)];
    /// <summary>
    /// System directory of the operating system.
    /// </summary>
    public string? SystemDirectory => (string)ManagementObject[nameof(SystemDirectory)];
    public string? SystemDrive => (string)ManagementObject[nameof(SystemDrive)];
    /// <summary>
    /// Version number of the operating system.
    /// </summary>
    public new string? Version => (string)ManagementObject[nameof(Version)];
    /// <summary>
    /// Windows directory of the operating system.
    /// </summary>
    public string? WindowsDirectory => (string)ManagementObject[nameof(WindowsDirectory)];
    /// <summary>
    /// Not supported
    /// </summary>
    public byte? QuantumLength => (byte?)ManagementObject[nameof(QuantumLength)];
    /// <summary>
    /// Not supported
    /// </summary>
    public byte? QuantumType => (byte?)ManagementObject[nameof(QuantumType)];
}
