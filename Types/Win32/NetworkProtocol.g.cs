/**************************************************************
 *                                                            *
 *   WARNING: This file is autogenerated by                   *
 *   System.Management.Generator.                             *
 *   Any changes made to this file will be overwritten.       *
 *                                                            *
 **************************************************************/
namespace System.Management.Types.Win32;

public partial record class NetworkProtocol(ManagementObject ManagementObject) : CIM.LogicalElement(ManagementObject)
{
    /// <summary>
    /// Protocol supports connectionless service. A connectionless (datagram) service describes a communications protocol or transport in which data packets are routed independently of each other and may follow different routes and arrive in a different order from that in which they were sent. Conversely, a connection-oriented service provides a virtual circuit through which data packets are received in the same order they were transmitted. If the connection between computers fails, the application is notified.
    /// </summary>
    public bool? ConnectionlessService => (bool?)ManagementObject[nameof(ConnectionlessService)];
    /// <summary>
    /// Protocol supports delivery of data packets. If this flag is FALSE, it is uncertain that all of the data sent will reach the intended destination.
    /// </summary>
    public bool? GuaranteesDelivery => (bool?)ManagementObject[nameof(GuaranteesDelivery)];
    /// <summary>
    /// Protocol ensures that data will arrive in the order in which it was sent. Be aware that this characteristic does not ensure delivery of the data, only its order.
    /// </summary>
    public bool? GuaranteesSequencing => (bool?)ManagementObject[nameof(GuaranteesSequencing)];
    /// <summary>
    /// Maximum length of a socket address supported by the protocol. Socket addresses may be items such as a URL (www.microsoft.com) or an IP address (130.215.24.1).
    /// </summary>
    public uint? MaximumAddressSize => (uint?)ManagementObject[nameof(MaximumAddressSize)];
    /// <summary>
    /// Maximum message size supported by the protocol. This is the maximum size of a message that can be sent from or received by the host. For protocols that do not support message framing, the actual maximum size of a message that can be sent to a given address may be less than this value.
    /// </summary>
    public uint? MaximumMessageSize => (uint?)ManagementObject[nameof(MaximumMessageSize)];
    /// <summary>
    /// Protocol is message-oriented. A message-oriented protocol uses packets of data to transfer information. Conversely, stream-oriented protocols transfer data as a continuous stream of bytes.
    /// </summary>
    public bool? MessageOriented => (bool?)ManagementObject[nameof(MessageOriented)];
    /// <summary>
    /// Minimum length of a socket address supported by the protocol.
    /// </summary>
    public uint? MinimumAddressSize => (uint?)ManagementObject[nameof(MinimumAddressSize)];
    /// <summary>
    /// Name for the protocol.
    /// </summary>
    public new string? Name => (string)ManagementObject[nameof(Name)];
    /// <summary>
    /// Protocol is a message-oriented protocol that can receive variable-length data packets or streamed data for all receive operations. This optional ability is useful when an application does not want the protocol to frame messages, and requires stream-oriented characteristics. If TRUE, the protocol is pseudo stream-oriented.
    /// </summary>
    public bool? PseudoStreamOriented => (bool?)ManagementObject[nameof(PseudoStreamOriented)];
    /// <summary>
    /// Protocol supports a mechanism for broadcasting messages across the network.
    /// </summary>
    public bool? SupportsBroadcasting => (bool?)ManagementObject[nameof(SupportsBroadcasting)];
    /// <summary>
    /// Protocol allows data to be connected across the network.
    /// </summary>
    public bool? SupportsConnectData => (bool?)ManagementObject[nameof(SupportsConnectData)];
    /// <summary>
    /// Protocol allows data to be disconnected across the network.
    /// </summary>
    public bool? SupportsDisconnectData => (bool?)ManagementObject[nameof(SupportsDisconnectData)];
    /// <summary>
    /// Protocol supports data encryption.
    /// </summary>
    public bool? SupportsEncryption => (bool?)ManagementObject[nameof(SupportsEncryption)];
    /// <summary>
    /// Protocol supports expedited data (also known as urgent data) across the network. Expedited data can bypass flow control and receive priority over normal data packets.
    /// </summary>
    public bool? SupportsExpeditedData => (bool?)ManagementObject[nameof(SupportsExpeditedData)];
    /// <summary>
    /// Protocol supports transmitting the data in fragments. Physical network maximum transfer unit (MTU) is hidden from applications. Each media type has a maximum frame size that cannot be exceeded. The link layer discovers the MTU and reports it to the protocols used.
    /// </summary>
    public bool? SupportsFragmentation => (bool?)ManagementObject[nameof(SupportsFragmentation)];
    /// <summary>
    /// Protocol supports two-phase close operations, also known as "graceful close operations". If not, the protocol supports only abortive close operations.
    /// </summary>
    public bool? SupportsGracefulClosing => (bool?)ManagementObject[nameof(SupportsGracefulClosing)];
    /// <summary>
    /// Protocol has a mechanism to establish and maintain a bandwidth.
    /// </summary>
    public bool? SupportsGuaranteedBandwidth => (bool?)ManagementObject[nameof(SupportsGuaranteedBandwidth)];
    /// <summary>
    /// Protocol supports multicasting.
    /// </summary>
    public bool? SupportsMulticasting => (bool?)ManagementObject[nameof(SupportsMulticasting)];
    /// <summary>
    /// Protocol is capable of Quality of Service (QoS) support by the underlying layered service provider or transport carrier. QoS is a collection of components that enable differentiation and preferential treatment for subsets of data transmitted over the network. QoS means subsets of data get higher priority or guaranteed service when traversing a network.
    /// </summary>
    public bool? SupportsQualityofService => (bool?)ManagementObject[nameof(SupportsQualityofService)];
}
