/**************************************************************
 *                                                            *
 *   WARNING: This file is autogenerated by                   *
 *   System.Management.Generator.                             *
 *   Any changes made to this file will be overwritten.       *
 *                                                            *
 **************************************************************/
#nullable enable
namespace System.Management.Types.Win32;

public partial record class SerialPort(ManagementObject ManagementObject) : CIM.SerialController(ManagementObject)
{
    /// <summary>
    /// If TRUE, the serial port is configured for binary data transfer. Because the Windows API does not support nonbinary mode transfers, this property must be TRUE.
    /// </summary>
    public bool? Binary => (bool?)ManagementObject[nameof(Binary)];
    /// <summary>
    /// Maximum size of the serial port driver's internal input buffer. A value of 0 (zero) indicates that no maximum value is imposed by the serial provider.
    /// </summary>
    public uint? MaximumInputBufferSize => (uint?)ManagementObject[nameof(MaximumInputBufferSize)];
    /// <summary>
    /// Maximum size of the serial port driver's internal output buffer. A value of 0 (zero) indicates that no maximum value is imposed by the serial provider.
    /// </summary>
    public uint? MaximumOutputBufferSize => (uint?)ManagementObject[nameof(MaximumOutputBufferSize)];
    /// <summary>
    /// If TRUE, the instances of this class were automatically discovered by the operating system. If, for example, hardware was added through Control Panel, the operating system finds instances of this class by querying hardware from the instances of this class.
    /// </summary>
    public bool? OSAutoDiscovered => (bool?)ManagementObject[nameof(OSAutoDiscovered)];
    /// <summary>
    /// Communications provider type.
    /// </summary>
    public string? ProviderType => (string)ManagementObject[nameof(ProviderType)];
    /// <summary>
    /// If TRUE, the baud rate can be changed for this serial port.
    /// </summary>
    public bool? SettableBaudRate => (bool?)ManagementObject[nameof(SettableBaudRate)];
    /// <summary>
    /// If TRUE, data bits can be set for this serial port.
    /// </summary>
    public bool? SettableDataBits => (bool?)ManagementObject[nameof(SettableDataBits)];
    /// <summary>
    /// If TRUE, flow control can be set for this serial port.
    /// </summary>
    public bool? SettableFlowControl => (bool?)ManagementObject[nameof(SettableFlowControl)];
    /// <summary>
    /// If TRUE, parity can be set for this serial port.
    /// </summary>
    public bool? SettableParity => (bool?)ManagementObject[nameof(SettableParity)];
    /// <summary>
    /// If TRUE, parity checking can be set for this serial port (if parity checking is supported).
    /// </summary>
    public bool? SettableParityCheck => (bool?)ManagementObject[nameof(SettableParityCheck)];
    /// <summary>
    /// If TRUE, Received Line Signal Detect (RLSD) can be set for this serial port (if RLSD is supported).
    /// </summary>
    public bool? SettableRLSD => (bool?)ManagementObject[nameof(SettableRLSD)];
    /// <summary>
    /// If TRUE, stop bits can be set for this serial port.
    /// </summary>
    public bool? SettableStopBits => (bool?)ManagementObject[nameof(SettableStopBits)];
    /// <summary>
    /// If TRUE, 16-bit mode is supported on this serial port.
    /// </summary>
    public bool? Supports16BitMode => (bool?)ManagementObject[nameof(Supports16BitMode)];
    /// <summary>
    /// If TRUE, data terminal ready (DTR) and data set ready (DSR) signals are supported on this serial port.
    /// </summary>
    public bool? SupportsDTRDSR => (bool?)ManagementObject[nameof(SupportsDTRDSR)];
    /// <summary>
    /// If TRUE, elapsed time-outs are supported on this serial port. Elapsed timeouts track the total amount of time between data transmissions.
    /// </summary>
    public bool? SupportsElapsedTimeouts => (bool?)ManagementObject[nameof(SupportsElapsedTimeouts)];
    /// <summary>
    /// If TRUE, interval time-outs are supported. An interval timeout is the amount of time allowed to elapse between the arrival of each piece of data.
    /// </summary>
    public bool? SupportsIntTimeouts => (bool?)ManagementObject[nameof(SupportsIntTimeouts)];
    /// <summary>
    /// If TRUE, parity checking is supported on this serial port.
    /// </summary>
    public bool? SupportsParityCheck => (bool?)ManagementObject[nameof(SupportsParityCheck)];
    /// <summary>
    /// If TRUE, Received Line Signal Detect (RLSD) is supported on this serial port.
    /// </summary>
    public bool? SupportsRLSD => (bool?)ManagementObject[nameof(SupportsRLSD)];
    /// <summary>
    /// If TRUE, ready to send (RTS) and clear to send (CTS) signals are supported on this serial port.
    /// </summary>
    public bool? SupportsRTSCTS => (bool?)ManagementObject[nameof(SupportsRTSCTS)];
    /// <summary>
    /// If TRUE, serial port control characters are supported. These characters signal events rather than data. These characters are not displayable and are set by the driver. They include EofChar, ErrorChar, BreakChar, EventChar, XonChar, and XoffChar.
    /// </summary>
    public bool? SupportsSpecialCharacters => (bool?)ManagementObject[nameof(SupportsSpecialCharacters)];
    /// <summary>
    /// If TRUE, XON or XOFF flow-control is supported on this serial port.
    /// </summary>
    public bool? SupportsXOnXOff => (bool?)ManagementObject[nameof(SupportsXOnXOff)];
    /// <summary>
    /// If TRUE, the communications provider supports configuration of the XONor XOFF flow-control setting.
    /// </summary>
    public bool? SupportsXOnXOffSet => (bool?)ManagementObject[nameof(SupportsXOnXOffSet)];
}
