/**************************************************************
 *                                                            *
 *   WARNING: This file is autogenerated by                   *
 *   System.Management.Generator.                             *
 *   Any changes made to this file will be overwritten.       *
 *                                                            *
 **************************************************************/
#nullable enable
namespace System.Management.Types.Win32;

public partial record class PrintJob(ManagementObject ManagementObject) : CIM.Job(ManagementObject)
{
    /// <summary>
    /// String that indicates whether the document is printed in color or monochrome. Some color printers have the capability to print using true black instead of a combination of yellow, cyan, and magenta. True black usually creates darker and sharper text for documents. This option is only useful for color printers that support true black printing.
    /// </summary>
    public string? Color => (string)ManagementObject[nameof(Color)];
    /// <summary>
    /// Format of the data for this print job. This instructs the printer driver to translate the data (generic text, PostScript, or PCL) before printing, or print in a raw format (for graphics and pictures).
    /// </summary>
    public string? DataType => (string)ManagementObject[nameof(DataType)];
    /// <summary>
    /// Name of the print job. The user sees this name when viewing documents that are waiting to be printed.
    /// </summary>
    public string? Document => (string)ManagementObject[nameof(Document)];
    /// <summary>
    /// Name of the printer driver used for the print job.
    /// </summary>
    public string? DriverName => (string)ManagementObject[nameof(DriverName)];
    /// <summary>
    /// Name of the computer on which the print job is created.
    /// </summary>
    public string? HostPrintQueue => (string)ManagementObject[nameof(HostPrintQueue)];
    /// <summary>
    /// Identifier number of the job. It is used by other methods as a handle to a job spooling to the printer.
    /// </summary>
    public uint? JobId => (uint?)ManagementObject[nameof(JobId)];
    /// <summary>
    /// Number of pages that are printed. This value may be 0 (zero) if the print job does not contain page-delimiting information.
    /// </summary>
    public uint? PagesPrinted => (uint?)ManagementObject[nameof(PagesPrinted)];
    /// <summary>
    /// Length of the paper.
    /// </summary>
    public uint? PaperLength => (uint?)ManagementObject[nameof(PaperLength)];
    /// <summary>
    /// Size of the paper used to print the job. The value is one of the possible paper sizes for the printer specified in the PaperSizesSupported property of Win32_Printer class.
    /// </summary>
    public string? PaperSize => (string)ManagementObject[nameof(PaperSize)];
    /// <summary>
    /// Width of the paper.
    /// </summary>
    public uint? PaperWidth => (uint?)ManagementObject[nameof(PaperWidth)];
    /// <summary>
    /// Optional parameters to send to the print processor. For more information, see the PrintProcessor property.
    /// </summary>
    public string? Parameters => (string)ManagementObject[nameof(Parameters)];
    /// <summary>
    /// Print processor service used to process the print job. A printer processor works in conjunction with the printer driver to provide additional translation of printer data for the printer, and can also be used to provide special options, such as a title page for the job.
    /// </summary>
    public string? PrintProcessor => (string)ManagementObject[nameof(PrintProcessor)];
    /// <summary>
    /// Size of the print job.
    /// </summary>
    public uint? Size => (uint?)ManagementObject[nameof(Size)];
    /// <summary>
    /// Bitmap of the possible statuses that relate to this print job.
    /// </summary>
    public uint? StatusMask => (uint?)ManagementObject[nameof(StatusMask)];
    /// <summary>
    /// Number of pages required to complete the job. This value may be 0 (zero) if the print job does not contain page-delimiting information.
    /// </summary>
    public uint? TotalPages => (uint?)ManagementObject[nameof(TotalPages)];
}
