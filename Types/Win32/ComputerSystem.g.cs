/**************************************************************
 *                                                            *
 *   WARNING: This file is autogenerated by                    *
 *   System.Management.Generator.                              *
 *   Any changes made to this file will be overwritten.        *
 *                                                            *
 **************************************************************/
namespace System.Management.Types.Win32;

#nullable enable
public partial record class ComputerSystem(ManagementObject ManagementObject) : CIM.UnitaryComputerSystem(ManagementObject)
{
    /// <summary>
    /// System hardware security settings for administrator password status.
    /// </summary>
    public ushort? AdminPasswordStatus => (ushort?)ManagementObject[nameof(AdminPasswordStatus)];
    /// <summary>
    /// If True, the system manages the page file.
    /// </summary>
    public bool? AutomaticManagedPagefile => (bool?)ManagementObject[nameof(AutomaticManagedPagefile)];
    /// <summary>
    /// If True, the automatic reset boot option is enabled.
    /// </summary>
    public bool? AutomaticResetBootOption => (bool?)ManagementObject[nameof(AutomaticResetBootOption)];
    /// <summary>
    /// If True, the automatic reset is enabled.
    /// </summary>
    public bool? AutomaticResetCapability => (bool?)ManagementObject[nameof(AutomaticResetCapability)];
    /// <summary>
    /// Boot option limit is ON. Identifies the system action when the ResetLimit value is reached.
    /// </summary>
    public ushort? BootOptionOnLimit => (ushort?)ManagementObject[nameof(BootOptionOnLimit)];
    /// <summary>
    /// Type of reboot action after the time on the watchdog timer is elapsed.
    /// </summary>
    public ushort? BootOptionOnWatchDog => (ushort?)ManagementObject[nameof(BootOptionOnWatchDog)];
    /// <summary>
    /// If True, indicates whether a boot ROM is supported.
    /// </summary>
    public bool? BootROMSupported => (bool?)ManagementObject[nameof(BootROMSupported)];
    /// <summary>
    /// System is started. Fail-safe boot bypasses the user startup files also called SafeBoot.
    /// </summary>
    public string? BootupState => (string)ManagementObject[nameof(BootupState)];
    /// <summary>
    /// Status and Additional Data fields that identify the boot status.
    /// </summary>
    public ushort[]? BootStatus => (ushort[])ManagementObject[nameof(BootStatus)];
    /// <summary>
    /// Boot up state of the chassis.
    /// </summary>
    public ushort? ChassisBootupState => (ushort?)ManagementObject[nameof(ChassisBootupState)];
    /// <summary>
    /// The chassis or enclosure SKU number as a string.
    /// </summary>
    public string? ChassisSKUNumber => (string)ManagementObject[nameof(ChassisSKUNumber)];
    /// <summary>
    /// Amount of time the unitary computer system is offset from Coordinated Universal Time (UTC).
    /// </summary>
    public short? CurrentTimeZone => (short?)ManagementObject[nameof(CurrentTimeZone)];
    /// <summary>
    /// If True, the daylight savings mode is ON.
    /// </summary>
    public bool? DaylightInEffect => (bool?)ManagementObject[nameof(DaylightInEffect)];
    /// <summary>
    /// Name of local computer according to the domain name server (DNS).
    /// </summary>
    public string? DNSHostName => (string)ManagementObject[nameof(DNSHostName)];
    /// <summary>
    /// Name of the domain to which a computer belongs.
    /// </summary>
    public string? Domain => (string)ManagementObject[nameof(Domain)];
    /// <summary>
    /// Enables daylight savings time (DST) on a computer. A value of True indicates that the system time changes to an hour ahead or behind when DST starts or ends. A value of False indicates that the system time does not change to an hour ahead or behind when DST starts or ends. A value of NULL indicates that the DST status is unknown on a system.
    /// </summary>
    public bool? EnableDaylightSavingsTime => (bool?)ManagementObject[nameof(EnableDaylightSavingsTime)];
    /// <summary>
    /// The following table lists the hardware security settings for the reset button on a computer.
    /// </summary>
    public ushort? FrontPanelResetStatus => (ushort?)ManagementObject[nameof(FrontPanelResetStatus)];
    /// <summary>
    /// If True, a hypervisor is present.
    /// </summary>
    public bool? HypervisorPresent => (bool?)ManagementObject[nameof(HypervisorPresent)];
    /// <summary>
    /// If True, an infrared (IR) port exists on a computer system.
    /// </summary>
    public bool? InfraredSupported => (bool?)ManagementObject[nameof(InfraredSupported)];
    /// <summary>
    /// System hardware security settings for Keyboard Password Status.
    /// </summary>
    public ushort? KeyboardPasswordStatus => (ushort?)ManagementObject[nameof(KeyboardPasswordStatus)];
    /// <summary>
    /// Name of a computer manufacturer.
    /// </summary>
    public string? Manufacturer => (string)ManagementObject[nameof(Manufacturer)];
    /// <summary>
    /// Product name that a manufacturer gives to a computer. This property must have a value.
    /// </summary>
    public string? Model => (string)ManagementObject[nameof(Model)];
    /// <summary>
    /// If True, the network Server Mode is enabled.
    /// </summary>
    public bool? NetworkServerModeEnabled => (bool?)ManagementObject[nameof(NetworkServerModeEnabled)];
    /// <summary>
    /// Number of logical processors available on the computer.
    /// </summary>
    public uint? NumberOfLogicalProcessors => (uint?)ManagementObject[nameof(NumberOfLogicalProcessors)];
    /// <summary>
    /// Number of physical processors currently available on a system. This is the number of enabled processors for a system, which does not include the disabled processors. If a computer system has two physical processors each containing two logical processors, then the value of NumberOfProcessors is 2 and NumberOfLogicalProcessors is 4. The processors may be multicore or they may be hyperthreading processors. For more information, see Remarks.
    /// </summary>
    public uint? NumberOfProcessors => (uint?)ManagementObject[nameof(NumberOfProcessors)];
    /// <summary>
    /// List of data for a bitmap that the original equipment manufacturer (OEM) creates.
    /// </summary>
    public byte[]? OEMLogoBitmap => (byte[])ManagementObject[nameof(OEMLogoBitmap)];
    /// <summary>
    /// List of free-form strings that an OEM defines. For example, an OEM defines the part numbers for system reference documents, manufacturer contact information, and so on.
    /// </summary>
    public string[]? OEMStringArray => (string[])ManagementObject[nameof(OEMStringArray)];
    /// <summary>
    /// If True, the computer is part of a domain. If the value is NULL, the computer is not in a domain or the status is unknown. If you remove the computer from a domain, the value becomes false.
    /// </summary>
    public bool? PartOfDomain => (bool?)ManagementObject[nameof(PartOfDomain)];
    /// <summary>
    /// Time delay before a reboot is initiated in milliseconds. It is used after a system power cycle, local or remote system reset, and automatic system reset. A value of  1 (minus one) indicates that the pause value is unknown.
    /// </summary>
    public long? PauseAfterReset => (long?)ManagementObject[nameof(PauseAfterReset)];
    /// <summary>
    /// Type of the computer in use, such as laptop, desktop, or Tablet.
    /// </summary>
    public ushort? PCSystemType => (ushort?)ManagementObject[nameof(PCSystemType)];
    /// <summary>
    /// Type of the computer in use, such as laptop, desktop, or Tablet.
    /// </summary>
    public ushort? PCSystemTypeEx => (ushort?)ManagementObject[nameof(PCSystemTypeEx)];
    /// <summary>
    /// System hardware security settings for Power-On Password Status.
    /// </summary>
    public ushort? PowerOnPasswordStatus => (ushort?)ManagementObject[nameof(PowerOnPasswordStatus)];
    /// <summary>
    /// State of the power supply or supplies when last booted.
    /// </summary>
    public ushort? PowerSupplyState => (ushort?)ManagementObject[nameof(PowerSupplyState)];
    /// <summary>
    /// Number of automatic resets since the last reset. A value of  1 (minus one) indicates that the count is unknown.
    /// </summary>
    public short? ResetCount => (short?)ManagementObject[nameof(ResetCount)];
    /// <summary>
    /// Number of consecutive times a system reset is attempted. A value of  1 (minus one) indicates that the limit is unknown.
    /// </summary>
    public short? ResetLimit => (short?)ManagementObject[nameof(ResetLimit)];
    /// <summary>
    /// List of the support contact information for the Windows operating system.
    /// </summary>
    public string[]? SupportContactDescription => (string[])ManagementObject[nameof(SupportContactDescription)];
    /// <summary>
    /// The family to which a particular computer belongs. A family refers to a set of computers that are similar but not identical from a hardware or software point of view.
    /// </summary>
    public string? SystemFamily => (string)ManagementObject[nameof(SystemFamily)];
    /// <summary>
    /// Identifies a particular computer configuration for sale. It is sometimes also called a product ID or purchase order number.
    /// </summary>
    public string? SystemSKUNumber => (string)ManagementObject[nameof(SystemSKUNumber)];
    /// <summary>
    /// SystemStartupDelay is no longer available for use because Boot.ini is not used to configure system startup. Instead, use the BCD classes supplied by the Boot Configuration Data (BCD) WMI provider or the Bcdedit command.
    /// </summary>
    public ushort? SystemStartupDelay => (ushort?)ManagementObject[nameof(SystemStartupDelay)];
    /// <summary>
    /// SystemStartupOptions is no longer available for use because Boot.ini is not used to configure system startup. Instead, use the BCD classes supplied by the Boot Configuration Data (BCD) WMI provider or the Bcdedit command.
    /// </summary>
    public string[]? SystemStartupOptions => (string[])ManagementObject[nameof(SystemStartupOptions)];
    /// <summary>
    /// SystemStartupSetting is no longer available for use because Boot.ini is not used to configure system startup. Instead, use the BCD classes supplied by the Boot Configuration Data (BCD) WMI provider or the Bcdedit command.
    /// </summary>
    public byte? SystemStartupSetting => (byte?)ManagementObject[nameof(SystemStartupSetting)];
    /// <summary>
    /// System running on the Windows-based computer. This property must have a value.
    /// </summary>
    public string? SystemType => (string)ManagementObject[nameof(SystemType)];
    /// <summary>
    /// Thermal state of the system when last booted.
    /// </summary>
    public ushort? ThermalState => (ushort?)ManagementObject[nameof(ThermalState)];
    /// <summary>
    /// Total size of physical memory. Be aware that, under some circumstances, this property may not return an accurate value for the physical memory. For example, it is not accurate if the BIOS is using some of the physical memory. For an accurate value, use the Capacity property in Win32_PhysicalMemory instead.
    /// </summary>
    public ulong? TotalPhysicalMemory => (ulong?)ManagementObject[nameof(TotalPhysicalMemory)];
    /// <summary>
    /// Name of a user that is logged on currently. This property must have a value. In a terminal services session, UserName returns the name of the user that is logged on to the console not the user logged on during the terminal service session.
    /// </summary>
    public string? UserName => (string)ManagementObject[nameof(UserName)];
    /// <summary>
    /// Event that causes the system to power up.
    /// </summary>
    public ushort? WakeUpType => (ushort?)ManagementObject[nameof(WakeUpType)];
    /// <summary>
    /// Name of the workgroup for this computer. If the value of the PartOfDomain property is False, then the name of the workgroup is returned.
    /// </summary>
    public string? Workgroup => (string)ManagementObject[nameof(Workgroup)];
}
#nullable disable
