/**************************************************************
 *                                                            *
 *   WARNING: This file is autogenerated by                   *
 *   System.Management.Generator.                             *
 *   Any changes made to this file will be overwritten.       *
 *                                                            *
 **************************************************************/
#nullable enable
namespace System.Management.Types.Win32;

public partial record class OSRecoveryConfiguration(ManagementObject ManagementObject) : Base._Object(ManagementObject)
{
    /// <summary>
    /// System will automatically reboot during a recovery operation.
    /// </summary>
    public bool? AutoReboot => (bool?)ManagementObject[nameof(AutoReboot)];
    /// <summary>
    /// Full path to the debug file. A debug file is created with the memory state of the computer after a computer failure.
    /// </summary>
    public string? DebugFilePath => (string)ManagementObject[nameof(DebugFilePath)];
    /// <summary>
    /// Type of debugging information written to the log file.
    /// </summary>
    public uint? DebugInfoType => (uint?)ManagementObject[nameof(DebugInfoType)];
    /// <summary>
    /// Expanded version of the DebugFilePath property.
    /// </summary>
    public string? ExpandedDebugFilePath => (string)ManagementObject[nameof(ExpandedDebugFilePath)];
    /// <summary>
    /// Expanded version of the MiniDumpDirectory property.
    /// </summary>
    public string? ExpandedMiniDumpDirectory => (string)ManagementObject[nameof(ExpandedMiniDumpDirectory)];
    /// <summary>
    /// Only kernel debug information will be written to the debug log file. If TRUE, then only the state of the kernel is written to a file in the event of a system failure. If FALSE, the system will try to log the state of the memory, and any devices that can provide information about the system when it failed.
    /// </summary>
    public bool? KernelDumpOnly => (bool?)ManagementObject[nameof(KernelDumpOnly)];
    /// <summary>
    /// Directory where small memory dump files will be recorded and accumulated.
    /// </summary>
    public string? MiniDumpDirectory => (string)ManagementObject[nameof(MiniDumpDirectory)];
    /// <summary>
    /// Identifying name for this instance of the Win32_OSRecoveryConfiguration class.
    /// </summary>
    public string? Name => (string)ManagementObject[nameof(Name)];
    /// <summary>
    /// New debug file will overwrite an existing one.
    /// </summary>
    public bool? OverwriteExistingDebugFile => (bool?)ManagementObject[nameof(OverwriteExistingDebugFile)];
    /// <summary>
    /// Alert message will be sent to the system administrator in the event of an operating system failure.
    /// </summary>
    public bool? SendAdminAlert => (bool?)ManagementObject[nameof(SendAdminAlert)];
    /// <summary>
    /// Debugging information is to be written to a log file.
    /// </summary>
    public bool? WriteDebugInfo => (bool?)ManagementObject[nameof(WriteDebugInfo)];
    /// <summary>
    /// Events will be written to a system log.
    /// </summary>
    public bool? WriteToSystemLog => (bool?)ManagementObject[nameof(WriteToSystemLog)];
}
