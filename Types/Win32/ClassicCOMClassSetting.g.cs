/**************************************************************
 *                                                            *
 *   WARNING: This file is autogenerated by                   *
 *   System.Management.Generator.                             *
 *   Any changes made to this file will be overwritten.       *
 *                                                            *
 **************************************************************/
namespace System.Management.Types.Win32;

public partial record class ClassicCOMClassSetting(ManagementObject ManagementObject) : COMSetting(ManagementObject)
{
    /// <summary>
    /// Globally unique identifier (GUID) for the COM application using this COM component.
    /// </summary>
    public string? AppID => (string)ManagementObject[nameof(AppID)];
    /// <summary>
    /// GUID of the COM class to which this COM component will automatically be converted.
    /// </summary>
    public string? AutoConvertToClsid => (string)ManagementObject[nameof(AutoConvertToClsid)];
    /// <summary>
    /// GUID for the COM component that will automatically emulate instances of this class.
    /// </summary>
    public string? AutoTreatAsClsid => (string)ManagementObject[nameof(AutoTreatAsClsid)];
    /// <summary>
    /// GUID of this COM component.
    /// </summary>
    public string? ComponentId => (string)ManagementObject[nameof(ComponentId)];
    /// <summary>
    /// COM component is an OLE control.
    /// </summary>
    public bool? Control => (bool?)ManagementObject[nameof(Control)];
    /// <summary>
    /// Path to the executable file and resource identifier of the default icon used by the class.
    /// </summary>
    public string? DefaultIcon => (string)ManagementObject[nameof(DefaultIcon)];
    /// <summary>
    /// Full path including filename or only filename to a 16-bit custom handler for the COM component. The provider does not always return the full path.
    /// </summary>
    public string? InprocHandler => (string)ManagementObject[nameof(InprocHandler)];
    /// <summary>
    /// Full path including filename or only filename to a 32-bit custom handler for the COM component. The provider does not always return the full path.
    /// </summary>
    public string? InprocHandler32 => (string)ManagementObject[nameof(InprocHandler32)];
    /// <summary>
    /// Full path including filename or only filename to a 16-bit in-process server DLL for this COM component. The provider does not always return the full path.
    /// </summary>
    public string? InprocServer => (string)ManagementObject[nameof(InprocServer)];
    /// <summary>
    /// Full path including filename or only filename to a 32-bit in-process server DLL for this COM component. The provider does not always return the full path.
    /// </summary>
    public string? InprocServer32 => (string)ManagementObject[nameof(InprocServer32)];
    /// <summary>
    /// COM component can be inserted into OLE container applications.
    /// </summary>
    public bool? Insertable => (bool?)ManagementObject[nameof(Insertable)];
    /// <summary>
    /// COM component is a Java component.
    /// </summary>
    public bool? JavaClass => (bool?)ManagementObject[nameof(JavaClass)];
    /// <summary>
    /// Full path including filename or only filename to a 16-bit local server application. The provider does not always return the full path.
    /// </summary>
    public string? LocalServer => (string)ManagementObject[nameof(LocalServer)];
    /// <summary>
    /// Full path including filename or only filename to a 32-bit local server application. The provider does not always return the full path.
    /// </summary>
    public string? LocalServer32 => (string)ManagementObject[nameof(LocalServer32)];
    /// <summary>
    /// Full name of the COM application. It is used in areas such as the Results field of the OLE Paste Special dialog box.
    /// </summary>
    public string? LongDisplayName => (string)ManagementObject[nameof(LongDisplayName)];
    /// <summary>
    /// Programmatic identifier associated with the COM component. The format of a ProgID is &lt;Vendor.&lt;Component.&lt;Version. This identifier is not guaranteed to be unique.
    /// </summary>
    public string? ProgId => (string)ManagementObject[nameof(ProgId)];
    /// <summary>
    /// Short name of the COM application (used in menus and pop-ups).
    /// </summary>
    public string? ShortDisplayName => (string)ManagementObject[nameof(ShortDisplayName)];
    /// <summary>
    /// Threading model used by in-process COM classes. If this property is NULL, then no threading model is used. The component is created on the main thread of the client and calls from other threads are marshaled to this thread.
    /// </summary>
    public string? ThreadingModel => (string)ManagementObject[nameof(ThreadingModel)];
    /// <summary>
    /// Module name and resource identifier for a small (16x16) bitmap used for the face of a toolbar or toolbox button. Used when the COM component is an OLE or ActiveX control.
    /// </summary>
    public string? ToolBoxBitmap32 => (string)ManagementObject[nameof(ToolBoxBitmap32)];
    /// <summary>
    /// GUID of a COM component that can emulate instances of this component.
    /// </summary>
    public string? TreatAsClsid => (string)ManagementObject[nameof(TreatAsClsid)];
    /// <summary>
    /// GUID for the type library for this COM component.
    /// </summary>
    public string? TypeLibraryId => (string)ManagementObject[nameof(TypeLibraryId)];
    /// <summary>
    /// Version number of this COM class.
    /// </summary>
    public string? Version => (string)ManagementObject[nameof(Version)];
    /// <summary>
    /// Program identifier that is consistent for all versions of the same program.
    /// </summary>
    public string? VersionIndependentProgId => (string)ManagementObject[nameof(VersionIndependentProgId)];
}
