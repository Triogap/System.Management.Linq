/**************************************************************
 *                                                            *
 *   WARNING: This file is autogenerated by                    *
 *   System.Management.Generator.                              *
 *   Any changes made to this file will be overwritten.        *
 *                                                            *
 **************************************************************/
namespace System.Management.Types.Win32;

#nullable enable
public partial record class POTSModem(ManagementObject ManagementObject) : CIM.PotsModem(ManagementObject)
{
    /// <summary>
    /// Port to which the POTS modem is attached.
    /// </summary>
    public string? AttachedTo => (string)ManagementObject[nameof(AttachedTo)];
    /// <summary>
    /// Command string used to detect a dial tone before dialing.
    /// </summary>
    public string? BlindOff => (string)ManagementObject[nameof(BlindOff)];
    /// <summary>
    /// Command string used to dial whether or not there is a dial tone.
    /// </summary>
    public string? BlindOn => (string)ManagementObject[nameof(BlindOn)];
    /// <summary>
    /// All modem connection protocols with which this modem device is compatible.
    /// </summary>
    public string? CompatibilityFlags => (string)ManagementObject[nameof(CompatibilityFlags)];
    /// <summary>
    /// Command string used to disable hardware data compression.
    /// </summary>
    public string? CompressionOff => (string)ManagementObject[nameof(CompressionOff)];
    /// <summary>
    /// Command string used to enable hardware data compression.
    /// </summary>
    public string? CompressionOn => (string)ManagementObject[nameof(CompressionOn)];
    /// <summary>
    /// Modem initialization string. This property is made up of command strings from other properties of this class.
    /// </summary>
    public string? ConfigurationDialog => (string)ManagementObject[nameof(ConfigurationDialog)];
    /// <summary>
    /// Control settings for a serial communications device, in this case, the modem device.
    /// </summary>
    public byte[]? DCB => (byte[])ManagementObject[nameof(DCB)];
    /// <summary>
    /// If TRUE, this POTS modem is the default modem on the computer system running Windows.
    /// </summary>
    public byte[]? Default => (byte[])ManagementObject[nameof(Default)];
    /// <summary>
    /// Name of the device loader for the modem. A device loader loads and manages device drivers and enumerators for a given device.
    /// </summary>
    public string? DeviceLoader => (string)ManagementObject[nameof(DeviceLoader)];
    /// <summary>
    /// Physical type of the modem.
    /// </summary>
    public string? DeviceType => (string)ManagementObject[nameof(DeviceType)];
    /// <summary>
    /// Date of the modem driver.
    /// </summary>
    public DateTimeOffset? DriverDate => ManagementObject.GetDateTimePropertyValue(nameof(DriverDate));
    /// <summary>
    /// Command string used to enable error correction control when establishing a connection. This increases the reliability of the connection.
    /// </summary>
    public string? ErrorControlForced => (string)ManagementObject[nameof(ErrorControlForced)];
    /// <summary>
    /// Command string used to disable error control.
    /// </summary>
    public string? ErrorControlOff => (string)ManagementObject[nameof(ErrorControlOff)];
    /// <summary>
    /// Command string used to enable error control.
    /// </summary>
    public string? ErrorControlOn => (string)ManagementObject[nameof(ErrorControlOn)];
    /// <summary>
    /// Command string used to enable hardware flow control. Flow control consists of signals sent between computers that verify that both computers are ready to transmit or receive data.
    /// </summary>
    public string? FlowControlHard => (string)ManagementObject[nameof(FlowControlHard)];
    /// <summary>
    /// Command string used to disable flow control. Flow control consists of signals sent between computers that verify that both computers are ready to transmit or receive data.
    /// </summary>
    public string? FlowControlOff => (string)ManagementObject[nameof(FlowControlOff)];
    /// <summary>
    /// Command string used to enable software flow control. Flow control consists of signals sent between computers that verify that both computers are ready to transmit or receive data.
    /// </summary>
    public string? FlowControlSoft => (string)ManagementObject[nameof(FlowControlSoft)];
    /// <summary>
    /// Multiplier used with the InactivityTimeout property to calculate the timeout period of a connection.
    /// </summary>
    public string? InactivityScale => (string)ManagementObject[nameof(InactivityScale)];
    /// <summary>
    /// Index number for this POTS modem.
    /// </summary>
    public uint? Index => (uint?)ManagementObject[nameof(Index)];
    /// <summary>
    /// The device instance ID for this POTS modem.
    /// </summary>
    public string? IndexEx => (string)ManagementObject[nameof(IndexEx)];
    /// <summary>
    /// Model of this POTS modem.
    /// </summary>
    public string? Model => (string)ManagementObject[nameof(Model)];
    /// <summary>
    /// Path to this modem's .inf file. This file contains initialization information for the modem and its driver.
    /// </summary>
    public string? ModemInfPath => (string)ManagementObject[nameof(ModemInfPath)];
    /// <summary>
    /// Name of the section in the modem's .inf file that contains information about the modem.
    /// </summary>
    public string? ModemInfSection => (string)ManagementObject[nameof(ModemInfSection)];
    /// <summary>
    /// Command string used to instruct the modem to use Bell modulations for 300 and 1200 bps.
    /// </summary>
    public string? ModulationBell => (string)ManagementObject[nameof(ModulationBell)];
    /// <summary>
    /// Command string used to instruct the modem to use CCITT modulations for 300 and 1200 bps.
    /// </summary>
    public string? ModulationCCITT => (string)ManagementObject[nameof(ModulationCCITT)];
    /// <summary>
    /// Definition of the port used for this modem.
    /// </summary>
    public string? PortSubClass => (string)ManagementObject[nameof(PortSubClass)];
    /// <summary>
    /// Dialing prefix used to access an outside line.
    /// </summary>
    public string? Prefix => (string)ManagementObject[nameof(Prefix)];
    /// <summary>
    /// List of all the properties (and their values) for this modem.
    /// </summary>
    public byte[]? Properties => (byte[])ManagementObject[nameof(Properties)];
    /// <summary>
    /// Network path to the computer that provides the modem services.
    /// </summary>
    public string? ProviderName => (string)ManagementObject[nameof(ProviderName)];
    /// <summary>
    /// Command string used to instruct the modem to use pulse mode for dialing. Pulse dialing is necessary for phone lines that are unable to handle tone dialing.
    /// </summary>
    public string? Pulse => (string)ManagementObject[nameof(Pulse)];
    /// <summary>
    /// Command string used to reset the modem for the next call.
    /// </summary>
    public string? Reset => (string)ManagementObject[nameof(Reset)];
    /// <summary>
    /// Response this modem might report to the operating system during the connection process. The first two characters specify the type of response. The second two characters specify information about the connection being made. The second two characters are used only for Negotiation Progress or Connect response codes. The next eight characters specify the modem-to-modem line speed negotiated in bits per second (bps). The characters represent a 32-bit unsigned long integer format (byte and word reversed). The last eight characters indicate that the modem is changing to a different port or Data Terminal Equipment (DTE) speed. Usually this field is not used because modems make connections at a locked port speed regardless of the modem-to-modem or Data Communications Equipment (DCE) speed.
    /// </summary>
    public string? ResponsesKeyName => (string)ManagementObject[nameof(ResponsesKeyName)];
    /// <summary>
    /// Command string used to turn the modem speaker on after dialing a number, and turning the speaker off when a connection has been established.
    /// </summary>
    public string? SpeakerModeDial => (string)ManagementObject[nameof(SpeakerModeDial)];
    /// <summary>
    /// Command string used to turn the modem speaker off.
    /// </summary>
    public string? SpeakerModeOff => (string)ManagementObject[nameof(SpeakerModeOff)];
    /// <summary>
    /// Command string used to turn the modem speaker on.
    /// </summary>
    public string? SpeakerModeOn => (string)ManagementObject[nameof(SpeakerModeOn)];
    /// <summary>
    /// Command string used to instruct the modem to turn the speaker on (until a connection is established).
    /// </summary>
    public string? SpeakerModeSetup => (string)ManagementObject[nameof(SpeakerModeSetup)];
    /// <summary>
    /// Command string used to set the modem speaker to the highest volume.
    /// </summary>
    public string? SpeakerVolumeHigh => (string)ManagementObject[nameof(SpeakerVolumeHigh)];
    /// <summary>
    /// Command string used to set the modem speaker to the lowest volume.
    /// </summary>
    public string? SpeakerVolumeLow => (string)ManagementObject[nameof(SpeakerVolumeLow)];
    /// <summary>
    /// Command string used to set the modem speaker to a medium volume.
    /// </summary>
    public string? SpeakerVolumeMed => (string)ManagementObject[nameof(SpeakerVolumeMed)];
    /// <summary>
    /// Type of characters used for text passed through the modem.
    /// </summary>
    public string? StringFormat => (string)ManagementObject[nameof(StringFormat)];
    /// <summary>
    /// String that marks the end of a command string.
    /// </summary>
    public string? Terminator => (string)ManagementObject[nameof(Terminator)];
    /// <summary>
    /// Command string that instructs the modem to use tone mode for dialing. The phone line must support tone dialing.
    /// </summary>
    public string? Tone => (string)ManagementObject[nameof(Tone)];
    /// <summary>
    /// Command strings used to activate the voice capabilities of a voice modem.
    /// </summary>
    public string? VoiceSwitchFeature => (string)ManagementObject[nameof(VoiceSwitchFeature)];
}
#nullable disable
