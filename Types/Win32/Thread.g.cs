/**************************************************************
 *                                                            *
 *   WARNING: This file is autogenerated by                   *
 *   System.Management.Generator.                             *
 *   Any changes made to this file will be overwritten.       *
 *                                                            *
 **************************************************************/
#nullable enable
namespace System.Management.Types.Win32;

public partial record class Thread(ManagementObject ManagementObject) : CIM.Thread(ManagementObject)
{
    /// <summary>
    /// Total execution time, in milliseconds, given to this thread since its creation.
    /// </summary>
    public ulong? ElapsedTime => (ulong?)ManagementObject[nameof(ElapsedTime)];
    /// <summary>
    /// Handle to a thread. The handle has full access rights by default. With the correct security access, the handle can be used in any function that accepts a thread handle. Depending on the inheritance flag specified when it is created, this handle can be inherited by child processes.
    /// </summary>
    public new string? Handle => (string)ManagementObject[nameof(Handle)];
    /// <summary>
    /// Time in kernel mode, in 100 nanosecond units. If this information is not available, a value of 0 (zero) should be used.
    /// </summary>
    public new ulong? KernelModeTime => (ulong?)ManagementObject[nameof(KernelModeTime)];
    /// <summary>
    /// Dynamic priority of the thread. Each thread has a dynamic priority that the scheduler uses to determine which thread to execute. Initially, a thread's dynamic priority is the same as its base priority. The system can raise and lower the dynamic priority, to ensure that it is responsive (guaranteeing that no threads are starved for processor time). The system does not boost the priority of threads with a base priority level between 16 and 31. Only threads with a base priority between 0 and 15 receive dynamic priority boosts. Higher numbers indicate higher priorities.
    /// </summary>
    public new uint? Priority => (uint?)ManagementObject[nameof(Priority)];
    /// <summary>
    /// Current base priority of a thread. The operating system may raise the thread's dynamic priority above the base priority if the thread is handling user input, or lower it toward the base priority if the thread becomes compute-bound. The PriorityBase property can have a value between 0 and 31.
    /// </summary>
    public uint? PriorityBase => (uint?)ManagementObject[nameof(PriorityBase)];
    /// <summary>
    /// Process that created the thread. The contents of this property can be used by Windows application programming interface (API) elements.
    /// </summary>
    public new string? ProcessHandle => (string)ManagementObject[nameof(ProcessHandle)];
    /// <summary>
    /// Starting address of the thread. Because any application with appropriate access to the thread can change the thread's context, this value may only be an approximation of the thread's starting address.
    /// </summary>
    public uint? StartAddress => (uint?)ManagementObject[nameof(StartAddress)];
    /// <summary>
    /// Current execution state for the thread.
    /// </summary>
    public uint? ThreadState => (uint?)ManagementObject[nameof(ThreadState)];
    /// <summary>
    /// Reason why the thread is waiting. This value is only valid if the ThreadState member is set to Transition (6). Event pairs allow communication with protected subsystems.
    /// </summary>
    public uint? ThreadWaitReason => (uint?)ManagementObject[nameof(ThreadWaitReason)];
    /// <summary>
    /// Time in user mode, in 100 nanoseconds units. If this information is not available, a value of 0 (zero) should be used.
    /// </summary>
    public new ulong? UserModeTime => (ulong?)ManagementObject[nameof(UserModeTime)];
}
