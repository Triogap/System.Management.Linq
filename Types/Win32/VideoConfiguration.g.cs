/**************************************************************
 *                                                            *
 *   WARNING: This file is autogenerated by                   *
 *   System.Management.Generator.                             *
 *   Any changes made to this file will be overwritten.       *
 *                                                            *
 **************************************************************/
#nullable enable
namespace System.Management.Types.Win32;

public partial record class VideoConfiguration(ManagementObject ManagementObject) : CIM.Setting(ManagementObject)
{
    /// <summary>
    /// Indicates the current color depth of the video display.
    /// </summary>
    public uint? ActualColorResolution => (uint?)ManagementObject[nameof(ActualColorResolution)];
    /// <summary>
    /// Contains the name of the adapter chip.
    /// </summary>
    public string? AdapterChipType => (string)ManagementObject[nameof(AdapterChipType)];
    /// <summary>
    /// Specifies the name of the manufacturer of the adapter. This name can be used to compare the compatibility of this device with the needs of the computer system.
    /// </summary>
    public string? AdapterCompatibility => (string)ManagementObject[nameof(AdapterCompatibility)];
    /// <summary>
    /// Indicates the name of the digital-to-analog chip (DAC) used in the adapter.
    /// </summary>
    public string? AdapterDACType => (string)ManagementObject[nameof(AdapterDACType)];
    /// <summary>
    /// Contains a description or descriptive name of the video adapter.
    /// </summary>
    public string? AdapterDescription => (string)ManagementObject[nameof(AdapterDescription)];
    /// <summary>
    /// Indicates the memory size of the video adapter.
    /// </summary>
    public uint? AdapterRAM => (uint?)ManagementObject[nameof(AdapterRAM)];
    /// <summary>
    /// Indicates the type of video adapter.
    /// </summary>
    public string? AdapterType => (string)ManagementObject[nameof(AdapterType)];
    /// <summary>
    /// Indicates the actual number of bits per pixel representing the display. This may be scaled to the current video setting (represented by the ActualColorResolution property) of the user.
    /// </summary>
    public uint? BitsPerPixel => (uint?)ManagementObject[nameof(BitsPerPixel)];
    /// <summary>
    /// Indicates the current number of color planes used in the video display. A color plane is another way to represent pixel colors; instead of assigning a single RGB value to each a pixel, color planes separate the graphic into each of the primary color components (red green blue), and store them in their own planes. This allows for greater color depths on 8 and 16 bit video systems. Present graphics systems have the bitwidth large enough to store color depth information, making only one color plane necessary.
    /// </summary>
    public uint? ColorPlanes => (uint?)ManagementObject[nameof(ColorPlanes)];
    /// <summary>
    /// Indicates the number of color indexes in a color table for a video display. This property is used if the device has a color depth of no more than 8 bits per pixel. For devices with greater color depths, -1 is returned.
    /// </summary>
    public uint? ColorTableEntries => (uint?)ManagementObject[nameof(ColorTableEntries)];
    /// <summary>
    /// Indicates the current number of device-specific pens. A value of 0xFFFFFFFF means the device does not support pens. Pens are used to draw lines and theborders of polygonal objects.
    /// </summary>
    public uint? DeviceSpecificPens => (uint?)ManagementObject[nameof(DeviceSpecificPens)];
    /// <summary>
    /// Indicates the date and time the current video driver was installed.
    /// </summary>
    public DateTimeOffset? DriverDate => ManagementObject.GetDateTimePropertyValue(nameof(DriverDate));
    /// <summary>
    /// Indicates the current number of pixels in the horizontal direction (X axis) of the display.
    /// </summary>
    public uint? HorizontalResolution => (uint?)ManagementObject[nameof(HorizontalResolution)];
    /// <summary>
    /// Specifies the path to the .inf file of the video driver.
    /// </summary>
    public string? InfFilename => (string)ManagementObject[nameof(InfFilename)];
    /// <summary>
    /// Indicates the section of the .inf file where the Win32 video information resides.
    /// </summary>
    public string? InfSection => (string)ManagementObject[nameof(InfSection)];
    /// <summary>
    /// Indicates the name of the installed video driver.
    /// </summary>
    public string? InstalledDisplayDrivers => (string)ManagementObject[nameof(InstalledDisplayDrivers)];
    /// <summary>
    /// Indicates the name of the manufacturer of the display device.
    /// </summary>
    public string? MonitorManufacturer => (string)ManagementObject[nameof(MonitorManufacturer)];
    /// <summary>
    /// Indicates the model name of the display device.
    /// </summary>
    public string? MonitorType => (string)ManagementObject[nameof(MonitorType)];
    /// <summary>
    /// Contains an identifying name for the video configuration class.
    /// </summary>
    public string? Name => (string)ManagementObject[nameof(Name)];
    /// <summary>
    /// Indicates the number of pixels per logical inch along the X axis (horizontal direction) of the display.
    /// </summary>
    public uint? PixelsPerXLogicalInch => (uint?)ManagementObject[nameof(PixelsPerXLogicalInch)];
    /// <summary>
    /// Indicates the number of pixels per logical inch along the Y axis (vertical direction) of the display.
    /// </summary>
    public uint? PixelsPerYLogicalInch => (uint?)ManagementObject[nameof(PixelsPerYLogicalInch)];
    /// <summary>
    /// Indicates the refresh rate of the video configuration. A value of 0 or 1 indicates a default rate is being used.
    /// </summary>
    public uint? RefreshRate => (uint?)ManagementObject[nameof(RefreshRate)];
    /// <summary>
    /// Indicates whether the display device is interlaced.
    /// </summary>
    public string? ScanMode => (string)ManagementObject[nameof(ScanMode)];
    /// <summary>
    /// Specifies the height of the physical screen.
    /// </summary>
    public uint? ScreenHeight => (uint?)ManagementObject[nameof(ScreenHeight)];
    /// <summary>
    /// Specifies the width of the physical screen.
    /// </summary>
    public uint? ScreenWidth => (uint?)ManagementObject[nameof(ScreenWidth)];
    /// <summary>
    /// Iindicates the current number of color index entries reserved for system use. This value is only valid for display settings that use an indexed palette . Indexed palettes are not used for color depths greater than 8 bits per pixel. If the color depth is more than 8 bits per pixel, this value is set to NULL.
    /// </summary>
    public uint? SystemPaletteEntries => (uint?)ManagementObject[nameof(SystemPaletteEntries)];
    /// <summary>
    /// Indicates the current number of pixels in the vertical direction (Y axis) of the display.
    /// </summary>
    public uint? VerticalResolution => (uint?)ManagementObject[nameof(VerticalResolution)];
}
