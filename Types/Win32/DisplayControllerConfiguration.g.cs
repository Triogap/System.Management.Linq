/**************************************************************
 *                                                            *
 *   WARNING: This file is autogenerated by                   *
 *   System.Management.Generator.                             *
 *   Any changes made to this file will be overwritten.       *
 *                                                            *
 **************************************************************/
#nullable enable
namespace System.Management.Types.Win32;

public partial record class DisplayControllerConfiguration(ManagementObject ManagementObject) : CIM.Setting(ManagementObject)
{
    /// <summary>
    /// Either the number of bits used to represent the color in this configuration, or the bits in each pixel.
    /// </summary>
    public uint? BitsPerPixel => (uint?)ManagementObject[nameof(BitsPerPixel)];
    /// <summary>
    /// Current number of color planes used in the display configuration. A color plane is another way to represent pixel colors. Instead of assigning a single RGB value to each pixel, color planes separate the graphic into each of the primary color components (red, green, blue), and stores them in their own planes. This allows for greater color depths on 8-bit and 16-bit video systems. Present graphics systems have the bitwidth large enough to store color depth information, meaning only one color plane is needed.
    /// </summary>
    public uint? ColorPlanes => (uint?)ManagementObject[nameof(ColorPlanes)];
    /// <summary>
    /// Number of color indexes in a color table of a display device (if the device has a color depth of no more than 8 bits per pixel). For devices with greater color depths, -1 is returned.
    /// </summary>
    public uint? DeviceEntriesInAColorTable => (uint?)ManagementObject[nameof(DeviceEntriesInAColorTable)];
    /// <summary>
    /// Current number of device-specific pens. A value of 0xFFFFFFFF means the device does not support pens. Pens are logical properties that can be assigned by the display controller to display devices, and are used to draw lines, borders of polygons, and text.
    /// </summary>
    public uint? DeviceSpecificPens => (uint?)ManagementObject[nameof(DeviceSpecificPens)];
    /// <summary>
    /// Current number of pixels in the horizontal direction (x-axis) of the display.
    /// </summary>
    public uint? HorizontalResolution => (uint?)ManagementObject[nameof(HorizontalResolution)];
    /// <summary>
    /// Name of the adapter used in this configuration.
    /// </summary>
    public string? Name => (string)ManagementObject[nameof(Name)];
    /// <summary>
    /// Refresh rate of the video adapter. A value of 0 (zero) or 1 (one) indicates a default rate is being used. A value of -1 indicates that an optimal rate is being used.
    /// </summary>
    public int? RefreshRate => (int?)ManagementObject[nameof(RefreshRate)];
    /// <summary>
    /// Current number of color index entries reserved for system use. This value is only valid for display settings that use an indexed palette. Indexed palettes are not used for color depths greater than 8 bits per pixel. If the color depth is more than 8 bits per pixel, this value is set to NULL.
    /// </summary>
    public uint? ReservedSystemPaletteEntries => (uint?)ManagementObject[nameof(ReservedSystemPaletteEntries)];
    /// <summary>
    /// Current number of color index entries reserved for system use. This value is only valid for display settings that use an indexed palette. Indexed palettes are not used for color depths greater than 8 bits per pixel. If the color depth is more than 8 bits per pixel, this value is set to NULL.
    /// </summary>
    public uint? SystemPaletteEntries => (uint?)ManagementObject[nameof(SystemPaletteEntries)];
    /// <summary>
    /// Current number of pixels in the vertical direction (y-axis) of the display.
    /// </summary>
    public uint? VerticalResolution => (uint?)ManagementObject[nameof(VerticalResolution)];
    /// <summary>
    /// User-readable description of the current screen resolution and color setting of the display.
    /// </summary>
    public string? VideoMode => (string)ManagementObject[nameof(VideoMode)];
}
