/**************************************************************
 *                                                            *
 *   WARNING: This file is autogenerated by                    *
 *   System.Management.Generator.                              *
 *   Any changes made to this file will be overwritten.        *
 *                                                            *
 **************************************************************/
namespace System.Management.Types.Win32;

#nullable enable
public partial record class Printer(ManagementObject ManagementObject) : CIM.Printer(ManagementObject)
{
    /// <summary>
    /// Bitmap of attributes for a Windows-based printing device.
    /// </summary>
    public uint? Attributes => (uint?)ManagementObject[nameof(Attributes)];
    /// <summary>
    /// Printing rate, in average number of pages per minute, that a printer can produce output.
    /// </summary>
    public uint? AveragePagesPerMinute => (uint?)ManagementObject[nameof(AveragePagesPerMinute)];
    /// <summary>
    /// Comment for a print queue.
    /// </summary>
    public string? Comment => (string)ManagementObject[nameof(Comment)];
    /// <summary>
    /// If TRUE, the printer is the default printer.
    /// </summary>
    public bool? Default => (bool?)ManagementObject[nameof(Default)];
    /// <summary>
    /// Default priority value assigned to each print job.
    /// </summary>
    public uint? DefaultPriority => (uint?)ManagementObject[nameof(DefaultPriority)];
    /// <summary>
    /// If TRUE, the print job is sent directly to the printer. If FALSE, the print job is spooled.
    /// </summary>
    public bool? Direct => (bool?)ManagementObject[nameof(Direct)];
    /// <summary>
    /// If TRUE, the printer starts jobs that are finished spooling. If FALSE, the printer starts jobs in the order that the jobs are received.
    /// </summary>
    public bool? DoCompleteFirst => (bool?)ManagementObject[nameof(DoCompleteFirst)];
    /// <summary>
    /// Name of the Windows printer driver.
    /// </summary>
    public string? DriverName => (string)ManagementObject[nameof(DriverName)];
    /// <summary>
    /// If TRUE, the printer can print bidirectionally.
    /// </summary>
    public bool? EnableBIDI => (bool?)ManagementObject[nameof(EnableBIDI)];
    /// <summary>
    /// If TRUE, the printer holds documents in the queue when document and printer setups do not match.
    /// </summary>
    public bool? EnableDevQueryPrint => (bool?)ManagementObject[nameof(EnableDevQueryPrint)];
    /// <summary>
    /// Reports standard error information. Additional information should be recorded in DetectedErrorState.
    /// </summary>
    public ushort? ExtendedDetectedErrorState => (ushort?)ManagementObject[nameof(ExtendedDetectedErrorState)];
    /// <summary>
    /// Status information for a printer that is different from information specified in the Availability property.
    /// </summary>
    public ushort? ExtendedPrinterStatus => (ushort?)ManagementObject[nameof(ExtendedPrinterStatus)];
    /// <summary>
    /// If TRUE, the printer is hidden from network users.
    /// </summary>
    public bool? Hidden => (bool?)ManagementObject[nameof(Hidden)];
    /// <summary>
    /// If TRUE, the print spooler does not delete the completed jobs.
    /// </summary>
    public bool? KeepPrintedJobs => (bool?)ManagementObject[nameof(KeepPrintedJobs)];
    /// <summary>
    /// If TRUE, the printer is not attached to a network. If both the Local and Network properties are set to TRUE, then the printer is a network printer.
    /// </summary>
    public bool? Local => (bool?)ManagementObject[nameof(Local)];
    /// <summary>
    /// Physical location of the printer.
    /// </summary>
    public string? Location => (string)ManagementObject[nameof(Location)];
    /// <summary>
    /// If TRUE, the printer is a network printer. If both the Local and Network properties are set to TRUE, then the printer is a network printer.
    /// </summary>
    public bool? Network => (bool?)ManagementObject[nameof(Network)];
    /// <summary>
    /// Optional parameters for the print processor.
    /// </summary>
    public string? Parameters => (string)ManagementObject[nameof(Parameters)];
    /// <summary>
    /// Port that is used to transmit data to a printer. If a printer is connected to more than one port, the names of each port are separated by commas.
    /// </summary>
    public string? PortName => (string)ManagementObject[nameof(PortName)];
    /// <summary>
    /// Array of paper sizes supported by the printer. The printer-specified names are used to represent supported paper sizes.
    /// </summary>
    public string[]? PrinterPaperNames => (string[])ManagementObject[nameof(PrinterPaperNames)];
    /// <summary>
    /// One of the possible states relating to this printer. This property is obsolete. In place of this property, use PrinterStatus.
    /// </summary>
    public uint? PrinterState => (uint?)ManagementObject[nameof(PrinterState)];
    /// <summary>
    /// Data type of a print job waiting for the Windows-based printing device.
    /// </summary>
    public string? PrintJobDataType => (string)ManagementObject[nameof(PrintJobDataType)];
    /// <summary>
    /// Name of the print spooler that handles print jobs.
    /// </summary>
    public string? PrintProcessor => (string)ManagementObject[nameof(PrintProcessor)];
    /// <summary>
    /// Priority of the printer. Jobs on a higher priority printer are scheduled first.
    /// </summary>
    public uint? Priority => (uint?)ManagementObject[nameof(Priority)];
    /// <summary>
    /// If TRUE, the printer is published in the network directory service.
    /// </summary>
    public bool? Published => (bool?)ManagementObject[nameof(Published)];
    /// <summary>
    /// If TRUE, the printer buffers and queues print jobs.
    /// </summary>
    public bool? Queued => (bool?)ManagementObject[nameof(Queued)];
    /// <summary>
    /// If TRUE, the printer accepts only raw data to be spooled.
    /// </summary>
    public bool? RawOnly => (bool?)ManagementObject[nameof(RawOnly)];
    /// <summary>
    /// Name of the file used to create a separator page. This page is used to separate print jobs sent to the printer.
    /// </summary>
    public string? SeparatorFile => (string)ManagementObject[nameof(SeparatorFile)];
    /// <summary>
    /// Name of the server that controls the printer. If this string is NULL, the printer is controlled locally.
    /// </summary>
    public string? ServerName => (string)ManagementObject[nameof(ServerName)];
    /// <summary>
    /// If TRUE, the printer is available as a shared network resource.
    /// </summary>
    public bool? Shared => (bool?)ManagementObject[nameof(Shared)];
    /// <summary>
    /// Share name of the Windows-based printing device.
    /// </summary>
    public string? ShareName => (string)ManagementObject[nameof(ShareName)];
    /// <summary>
    /// This property is obsolete; do not use. If TRUE, spooling is enabled for printer.
    /// </summary>
    public bool? SpoolEnabled => (bool?)ManagementObject[nameof(SpoolEnabled)];
    public DateTimeOffset? StartTime => ManagementObject.GetDateTimePropertyValue(nameof(StartTime));
    public DateTimeOffset? UntilTime => ManagementObject.GetDateTimePropertyValue(nameof(UntilTime));
    /// <summary>
    /// If TRUE, you can queue print jobs on the computer when the printer is offline.
    /// </summary>
    public bool? WorkOffline => (bool?)ManagementObject[nameof(WorkOffline)];
}
#nullable disable
