/**************************************************************
 *                                                            *
 *   WARNING: This file is autogenerated by                   *
 *   System.Management.Generator.                             *
 *   Any changes made to this file will be overwritten.       *
 *                                                            *
 **************************************************************/
#nullable enable
namespace System.Management.Types.Win32;

public partial record class LogicalDisk(ManagementObject ManagementObject) : CIM.LogicalDisk(ManagementObject)
{
    /// <summary>
    /// If True, the logical volume exists as a single compressed entity, such as a DoubleSpace volume. If file based compression is supported, such as on NTFS, this property is False.
    /// </summary>
    public bool? Compressed => (bool?)ManagementObject[nameof(Compressed)];
    /// <summary>
    /// Numeric value that corresponds to the type of disk drive this logical disk represents.
    /// </summary>
    public uint? DriveType => (uint?)ManagementObject[nameof(DriveType)];
    /// <summary>
    /// File system on the logical disk.
    /// </summary>
    public string? FileSystem => (string)ManagementObject[nameof(FileSystem)];
    /// <summary>
    /// Maximum length of a filename component supported by the Windows drive. A filename component is that portion of a filename between backslashes. The value can be used to indicate that long names are supported by the specified file system. For example, for a FAT file system supporting long names, the function stores the value 255, rather than the previous 8.3 indicator. Long names can also be supported on systems that use the NTFS file system.
    /// </summary>
    public uint? MaximumComponentLength => (uint?)ManagementObject[nameof(MaximumComponentLength)];
    /// <summary>
    /// Type of media currently present in the logical drive. This value will be one of the values of the MEDIA_TYPE enumeration defined in Winioctl.h. The value may not be exact for removable drives if currently there is no media in the drive.
    /// </summary>
    public uint? MediaType => (uint?)ManagementObject[nameof(MediaType)];
    /// <summary>
    /// Network path to the logical device.
    /// </summary>
    public string? ProviderName => (string)ManagementObject[nameof(ProviderName)];
    /// <summary>
    /// Indicates that quota management is not enabled (TRUE) on this system.
    /// </summary>
    public bool? QuotasDisabled => (bool?)ManagementObject[nameof(QuotasDisabled)];
    /// <summary>
    /// Indicates that the quota management was used but has been disabled (True). Incomplete refers to the information left in the file system after quota management was disabled.
    /// </summary>
    public bool? QuotasIncomplete => (bool?)ManagementObject[nameof(QuotasIncomplete)];
    /// <summary>
    /// If True, indicates that the file system is in the active process of compiling information and setting the disk up for quota management.
    /// </summary>
    public bool? QuotasRebuilding => (bool?)ManagementObject[nameof(QuotasRebuilding)];
    /// <summary>
    /// If True, this volume supports disk quotas.
    /// </summary>
    public bool? SupportsDiskQuotas => (bool?)ManagementObject[nameof(SupportsDiskQuotas)];
    /// <summary>
    /// If True, the logical disk partition supports file-based compression, such as is the case with the NTFS file system. This property is False when the Compressed property is True.
    /// </summary>
    public bool? SupportsFileBasedCompression => (bool?)ManagementObject[nameof(SupportsFileBasedCompression)];
    /// <summary>
    /// If True, the disk requires ChkDsk to be run at the next restart. This property is only applicable to those instances of logical disk that represent a physical disk in the machine. It is not applicable to mapped logical drives.
    /// </summary>
    public bool? VolumeDirty => (bool?)ManagementObject[nameof(VolumeDirty)];
    /// <summary>
    /// Volume name of the logical disk.
    /// </summary>
    public string? VolumeName => (string)ManagementObject[nameof(VolumeName)];
    /// <summary>
    /// Volume serial number of the logical disk.
    /// </summary>
    public string? VolumeSerialNumber => (string)ManagementObject[nameof(VolumeSerialNumber)];
}
