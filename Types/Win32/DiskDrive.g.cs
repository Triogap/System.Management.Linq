/**************************************************************
 *                                                            *
 *   WARNING: This file is autogenerated by                    *
 *   System.Management.Generator.                              *
 *   Any changes made to this file will be overwritten.        *
 *                                                            *
 **************************************************************/
namespace System.Management.Types.Win32;

#nullable enable
public partial record class DiskDrive(ManagementObject ManagementObject) : CIM.DiskDrive(ManagementObject)
{
    /// <summary>
    /// Number of bytes in each sector for the physical disk drive.
    /// </summary>
    public uint? BytesPerSector => (uint?)ManagementObject[nameof(BytesPerSector)];
    /// <summary>
    /// Revision for the disk drive firmware that is assigned by the manufacturer.
    /// </summary>
    public string? FirmwareRevision => (string)ManagementObject[nameof(FirmwareRevision)];
    /// <summary>
    /// Physical drive number of the given drive. This property is filled by the STORAGE_DEVICE_NUMBER structure returned from the IOCTL_STORAGE_GET_DEVICE_NUMBER control code. A value of 0xffffffff indicates that the given drive does not map to a physical drive.
    /// </summary>
    public uint? Index => (uint?)ManagementObject[nameof(Index)];
    /// <summary>
    /// Interface type of physical disk drive.
    /// </summary>
    public string? InterfaceType => (string)ManagementObject[nameof(InterfaceType)];
    /// <summary>
    /// Name of the disk drive manufacturer.
    /// </summary>
    public string? Manufacturer => (string)ManagementObject[nameof(Manufacturer)];
    /// <summary>
    /// If True, the media for a disk drive is loaded, which means that the device has a readable file system and is accessible. For fixed disk drives, this property will always be TRUE.
    /// </summary>
    public bool? MediaLoaded => (bool?)ManagementObject[nameof(MediaLoaded)];
    /// <summary>
    /// Type of media used or accessed by this device.
    /// </summary>
    public string? MediaType => (string)ManagementObject[nameof(MediaType)];
    /// <summary>
    /// Manufacturer's model number of the disk drive.
    /// </summary>
    public string? Model => (string)ManagementObject[nameof(Model)];
    /// <summary>
    /// Number of partitions on this physical disk drive that are recognized by the operating system.
    /// </summary>
    public uint? Partitions => (uint?)ManagementObject[nameof(Partitions)];
    /// <summary>
    /// SCSI bus number of the disk drive.
    /// </summary>
    public uint? SCSIBus => (uint?)ManagementObject[nameof(SCSIBus)];
    /// <summary>
    /// SCSI logical unit number (LUN) of the disk drive.
    /// </summary>
    public ushort? SCSILogicalUnit => (ushort?)ManagementObject[nameof(SCSILogicalUnit)];
    /// <summary>
    /// SCSI port number of the disk drive.
    /// </summary>
    public ushort? SCSIPort => (ushort?)ManagementObject[nameof(SCSIPort)];
    /// <summary>
    /// SCSI identifier number of the disk drive.
    /// </summary>
    public ushort? SCSITargetId => (ushort?)ManagementObject[nameof(SCSITargetId)];
    /// <summary>
    /// Number of sectors in each track for this physical disk drive.
    /// </summary>
    public uint? SectorsPerTrack => (uint?)ManagementObject[nameof(SectorsPerTrack)];
    /// <summary>
    /// Number allocated by the manufacturer to identify the physical media.
    /// </summary>
    public string? SerialNumber => (string)ManagementObject[nameof(SerialNumber)];
    /// <summary>
    /// Disk identification. This property can be used to identify a shared resource.
    /// </summary>
    public uint? Signature => (uint?)ManagementObject[nameof(Signature)];
    /// <summary>
    /// Size of the disk drive. It is calculated by multiplying the total number of cylinders, tracks in each cylinder, sectors in each track, and bytes in each sector.
    /// </summary>
    public ulong? Size => (ulong?)ManagementObject[nameof(Size)];
    /// <summary>
    /// For more information about using uint64 values in scripts, see Scripting in WMI.
    /// </summary>
    public ulong? TotalCylinders => (ulong?)ManagementObject[nameof(TotalCylinders)];
    public uint? TotalHeads => (uint?)ManagementObject[nameof(TotalHeads)];
    /// <summary>
    /// For more information about using uint64 values in scripts, see Scripting in WMI.
    /// </summary>
    public ulong? TotalSectors => (ulong?)ManagementObject[nameof(TotalSectors)];
    /// <summary>
    /// For more information about using uint64 values in scripts, see Scripting in WMI.
    /// </summary>
    public ulong? TotalTracks => (ulong?)ManagementObject[nameof(TotalTracks)];
    public uint? TracksPerCylinder => (uint?)ManagementObject[nameof(TracksPerCylinder)];
}
#nullable disable
