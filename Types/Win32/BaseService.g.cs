/**************************************************************
 *                                                            *
 *   WARNING: This file is autogenerated by                   *
 *   System.Management.Generator.                             *
 *   Any changes made to this file will be overwritten.       *
 *                                                            *
 **************************************************************/
#nullable enable
namespace System.Management.Types.Win32;

public partial record class BaseService(ManagementObject ManagementObject) : CIM.Service(ManagementObject)
{
    /// <summary>
    /// Service can be paused.
    /// </summary>
    public bool? AcceptPause => (bool?)ManagementObject[nameof(AcceptPause)];
    /// <summary>
    /// Service can be stopped.
    /// </summary>
    public bool? AcceptStop => (bool?)ManagementObject[nameof(AcceptStop)];
    /// <summary>
    /// Service can create or communicate with windows on the desktop.
    /// </summary>
    public bool? DesktopInteract => (bool?)ManagementObject[nameof(DesktopInteract)];
    /// <summary>
    /// Display name of the service. This string has a maximum length of 256 characters. The name is case-preserved in the Service Control Manager. Comparisons of DisplayName are always case-insensitive.
    /// </summary>
    public string? DisplayName => (string)ManagementObject[nameof(DisplayName)];
    /// <summary>
    /// Severity of the error. Service fails to start. The value indicates the action taken by the startup program if failure occurs. All errors are logged by the computer system.
    /// </summary>
    public string? ErrorControl => (string)ManagementObject[nameof(ErrorControl)];
    /// <summary>
    /// Defining any problems encountered in starting or stopping the service. This property is set to ERROR_SERVICE_SPECIFIC_ERROR (1066) when the error is unique to the service represented by this class, and information about the error is available in the ServiceSpecificExitCode property. The service sets this value to NO_ERROR when running, and again upon normal termination.
    /// </summary>
    public uint? ExitCode => (uint?)ManagementObject[nameof(ExitCode)];
    /// <summary>
    /// Fully qualified path to the service binary file that implements the service.
    /// </summary>
    public string? PathName => (string)ManagementObject[nameof(PathName)];
    /// <summary>
    /// Service-specific error code for errors that occur while the service is either starting or stopping. The exit codes are defined by the service represented by this class. This value is only set when the ExitCodeproperty value is ERROR_SERVICE_SPECIFIC_ERROR (1066).
    /// </summary>
    public uint? ServiceSpecificExitCode => (uint?)ManagementObject[nameof(ServiceSpecificExitCode)];
    /// <summary>
    /// Service provided to calling processes.
    /// </summary>
    public string? ServiceType => (string)ManagementObject[nameof(ServiceType)];
    public string? StartName => (string)ManagementObject[nameof(StartName)];
    /// <summary>
    /// Current state of the base service.
    /// </summary>
    public string? State => (string)ManagementObject[nameof(State)];
    public uint? TagId => (uint?)ManagementObject[nameof(TagId)];
}
