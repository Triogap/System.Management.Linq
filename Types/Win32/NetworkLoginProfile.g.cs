/**************************************************************
 *                                                            *
 *   WARNING: This file is autogenerated by                   *
 *   System.Management.Generator.                             *
 *   Any changes made to this file will be overwritten.       *
 *                                                            *
 **************************************************************/
#nullable enable
namespace System.Management.Types.Win32;

public partial record class NetworkLoginProfile(ManagementObject ManagementObject) : CIM.Setting(ManagementObject)
{
    public DateTimeOffset? AccountExpires => ManagementObject.GetDateTimePropertyValue(nameof(AccountExpires));
    /// <summary>
    /// Set of flags that specify the resources a user is authorized to use or modify.
    /// </summary>
    public uint? AuthorizationFlags => (uint?)ManagementObject[nameof(AuthorizationFlags)];
    /// <summary>
    /// Number of times the user enters a bad password when logging on to a computer system running Windows.
    /// </summary>
    public uint? BadPasswordCount => (uint?)ManagementObject[nameof(BadPasswordCount)];
    /// <summary>
    /// Code page for the user's language of choice. A code page is the character set used.
    /// </summary>
    public uint? CodePage => (uint?)ManagementObject[nameof(CodePage)];
    /// <summary>
    /// Comment or description for this logon profile.
    /// </summary>
    public string? Comment => (string)ManagementObject[nameof(Comment)];
    /// <summary>
    /// Country/region code for the user's language of choice.
    /// </summary>
    public uint? CountryCode => (uint?)ManagementObject[nameof(CountryCode)];
    /// <summary>
    /// The properties available to this network profile.
    /// </summary>
    public uint? Flags => (uint?)ManagementObject[nameof(Flags)];
    /// <summary>
    /// Full name of the user belonging to the network login profile. This string can be empty if the user chooses not to associate a full name with a user name.
    /// </summary>
    public string? FullName => (string)ManagementObject[nameof(FullName)];
    /// <summary>
    /// Path to the home directory of the user. This string may be empty if the user chooses not to specify a home directory.
    /// </summary>
    public string? HomeDirectory => (string)ManagementObject[nameof(HomeDirectory)];
    /// <summary>
    /// Drive letter assigned to the user's home directory for log on purposes.
    /// </summary>
    public string? HomeDirectoryDrive => (string)ManagementObject[nameof(HomeDirectoryDrive)];
    public DateTimeOffset? LastLogoff => ManagementObject.GetDateTimePropertyValue(nameof(LastLogoff));
    public DateTimeOffset? LastLogon => ManagementObject.GetDateTimePropertyValue(nameof(LastLogon));
    public string? LogonHours => (string)ManagementObject[nameof(LogonHours)];
    /// <summary>
    /// Name of the server to which logon requests are sent. Server names should be preceded by two backslashes (\\). A server name with an asterisk (\\*) indicates that the logon request can be handled by any logon server. A null string indicates that requests are sent to the domain controller.
    /// </summary>
    public string? LogonServer => (string)ManagementObject[nameof(LogonServer)];
    /// <summary>
    /// Maximum amount of disk space available to the user. If MaximumStorage is set to USER_MAXSTORAGE_UNLIMITED, the user is allowed to use all of the available disk space.
    /// </summary>
    public ulong? MaximumStorage => (ulong?)ManagementObject[nameof(MaximumStorage)];
    /// <summary>
    /// User account on a particular domain or computer. The number of characters in the name cannot exceed the value of UNLEN.
    /// </summary>
    public string? Name => (string)ManagementObject[nameof(Name)];
    /// <summary>
    /// Number of successful times the user tried to log on to this account. A value of 0xFFFFFFFF indicates that the value is unknown. This property is maintained separately on each backup domain controller (BDC) in the domain. To get an accurate value, only the largest value from all BDCs should be used.
    /// </summary>
    public uint? NumberOfLogons => (uint?)ManagementObject[nameof(NumberOfLogons)];
    /// <summary>
    /// Space set aside for use by applications. This string can be null, or it can have any number of characters before the terminating null character. Microsoft products use this member to store user configuration information. Do not modify this information, because this value is specific to an application.
    /// </summary>
    public string? Parameters => (string)ManagementObject[nameof(Parameters)];
    /// <summary>
    /// Length of time a password has been in effect. This value is measured from the number of seconds elapsed since the password was last changed.
    /// </summary>
    public DateTimeOffset? PasswordAge => ManagementObject.GetDateTimePropertyValue(nameof(PasswordAge));
    public DateTimeOffset? PasswordExpires => ManagementObject.GetDateTimePropertyValue(nameof(PasswordExpires));
    /// <summary>
    /// Relative identifier (RID) of the Primary Global Group for this user. The identifier verifies the primary group to which the user's profile belongs.
    /// </summary>
    public uint? PrimaryGroupId => (uint?)ManagementObject[nameof(PrimaryGroupId)];
    /// <summary>
    /// Level of privilege assigned to the usri3_name property.
    /// </summary>
    public uint? Privileges => (uint?)ManagementObject[nameof(Privileges)];
    /// <summary>
    /// Path to the user's profile. This value can be a null string, a local absolute path, or a UNC path. A user profile contains settings that are customizable for each user such as the desktop colors.
    /// </summary>
    public string? Profile => (string)ManagementObject[nameof(Profile)];
    /// <summary>
    /// Directory path to the user's logon script. A logon script automatically executes a set of commands each time a user logs on to a system.
    /// </summary>
    public string? ScriptPath => (string)ManagementObject[nameof(ScriptPath)];
    /// <summary>
    /// Number of time units the week is divided into. It is used with the LogonHours property to limit user access to the computer.
    /// </summary>
    public uint? UnitsPerWeek => (uint?)ManagementObject[nameof(UnitsPerWeek)];
    /// <summary>
    /// User-defined comment or description for this profile.
    /// </summary>
    public string? UserComment => (string)ManagementObject[nameof(UserComment)];
    /// <summary>
    /// RID of the user. The identifier verifies that the user exists and is unique to this domain.
    /// </summary>
    public uint? UserId => (uint?)ManagementObject[nameof(UserId)];
    /// <summary>
    /// Type of account to which the user has privileges.
    /// </summary>
    public string? UserType => (string)ManagementObject[nameof(UserType)];
    /// <summary>
    /// Names of workstations from which the user can log on. Up to eight workstations can be specified; the names must be separated by commas (,). A null string indicates no restrictions. To disable logons from all workstations to this account, set the UF_ACCOUNTDISABLE in the Flags property of this class.
    /// </summary>
    public string? Workstations => (string)ManagementObject[nameof(Workstations)];
}
