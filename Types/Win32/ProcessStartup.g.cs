/**************************************************************
 *                                                            *
 *   WARNING: This file is autogenerated by                    *
 *   System.Management.Generator.                              *
 *   Any changes made to this file will be overwritten.        *
 *                                                            *
 **************************************************************/
namespace System.Management.Types.Win32;

#nullable enable
public partial record class ProcessStartup(ManagementObject ManagementObject) : MethodParameterClass(ManagementObject)
{
    /// <summary>
    /// Additional values that control the priority class and the creation of the process. The following creation values can be specified in any combination, except as noted.
    /// </summary>
    public uint? CreateFlags => (uint?)ManagementObject[nameof(CreateFlags)];
    /// <summary>
    /// List of settings for the configuration of a computer. Environment variables specify search paths for files, directories for temporary files, application-specific options, and other similar information. The system maintains a block of environment settings for each user and one for the computer. The system environment block represents environment variables for all of the users of a specific computer. A user's environment block represents the environment variables that the system maintains for a specific user, and includes the set of system environment variables. By default, each process receives a copy of the environment block for its parent process. Typically, this is the environment block for the user who is logged on. A process can specify different environment blocks for its child processes.
    /// </summary>
    public string[]? EnvironmentVariables => (string[])ManagementObject[nameof(EnvironmentVariables)];
    /// <summary>
    /// On some non-x86 processors, misaligned memory references cause an alignment fault exception. The No_Alignment_Fault_Except flag lets you control whether or not an operating system automatically fixes such alignment faults, or makes them visible to an application. On a millions of instructions per second (MIPS) platform, an application must explicitly call SetErrorMode with the No_Alignment_Fault_Except flag to have the operating system automatically fix alignment faults.
    /// </summary>
    public ushort? ErrorMode => (ushort?)ManagementObject[nameof(ErrorMode)];
    /// <summary>
    /// The text and background colors if a new console window is created in a console application. These values are ignored in graphical user interface (GUI) applications. To specify both foreground and background colors, add the values together. For example, to have red type (4) on a blue background (16), set the FillAttribute to 20.
    /// </summary>
    public uint? FillAttribute => (uint?)ManagementObject[nameof(FillAttribute)];
    /// <summary>
    /// Priority class of the new process. Use this property to determine the schedule priorities of the threads in the process. If the property is left null, the priority class defaults to Normal—unless the priority class of the creating process is Idle or Below_Normal. In these cases, the child process receives the default priority class of the calling process.
    /// </summary>
    public uint? PriorityClass => (uint?)ManagementObject[nameof(PriorityClass)];
    /// <summary>
    /// How the window is displayed to the user. It can be any of the values that can be specified in the nCmdShow parameter for the ShowWindow function.
    /// </summary>
    public ushort? ShowWindow => (ushort?)ManagementObject[nameof(ShowWindow)];
    /// <summary>
    /// Text displayed in the title bar when a new console window is created; used for console processes. If NULL, the name of the executable file is used as the window title. This property must be NULL for GUI or console processes that do not create a new console window.
    /// </summary>
    public string? Title => (string)ManagementObject[nameof(Title)];
    /// <summary>
    /// The name of the desktop or the name of both the desktop and window station for the process. A backslash in the string indicates that the string includes both desktop and window station names. If WinstationDesktop is NULL, the new process inherits the desktop and window station of its parent process. If WinstationDesktop is an empty string, the process does not inherit the desktop and window station of its parent process. The system determines if a new desktop and window station must be created. A window station is a secure object that contains a clipboard, a set of global atoms, and a group of desktop objects. The interactive window station that is assigned to the logon session of the interactive user also contains the keyboard, mouse, and display device. A desktop is a secure object contained within a window station. A desktop has a logical display surface and contains windows, menus, and hooks. A window station can have multiple desktops. Only the desktops of the interactive window station can be visible and receive user input.
    /// </summary>
    public string? WinstationDesktop => (string)ManagementObject[nameof(WinstationDesktop)];
    /// <summary>
    /// The X offset of the upper left corner of a window if a new window is created—in pixels. The offsets are from the upper left corner of the screen. For GUI processes, the specified position is used the first time the new process calls CreateWindow to create an overlapped window if the X parameter of CreateWindow is CW_USEDEFAULT.
    /// </summary>
    public uint? X => (uint?)ManagementObject[nameof(X)];
    /// <summary>
    /// Screen buffer width in character columns. This property is used for processes that create a console window, and is ignored in GUI processes.
    /// </summary>
    public uint? XCountChars => (uint?)ManagementObject[nameof(XCountChars)];
    /// <summary>
    /// Pixel width of a window if a new window is created. For GUI processes, this is only used the first time the new process calls CreateWindow to create an overlapped window if the nWidth parameter of CreateWindow is CW_USEDEFAULT.
    /// </summary>
    public uint? XSize => (uint?)ManagementObject[nameof(XSize)];
    /// <summary>
    /// Pixel offset of the upper-left corner of a window if a new window is created. The offsets are from the upper-left corner of the screen. For GUI processes, the specified position is used the first time the new process calls CreateWindow to create an overlapped window if the y parameter of CreateWindow is CW_USEDEFAULT.
    /// </summary>
    public uint? Y => (uint?)ManagementObject[nameof(Y)];
    /// <summary>
    /// Screen buffer height in character rows. This property is used for processes that create a console window, but is ignored in GUI processes.
    /// </summary>
    public uint? YCountChars => (uint?)ManagementObject[nameof(YCountChars)];
    /// <summary>
    /// Pixel height of a window if a new window is created. For GUI processes, this is used only the first time the new process calls CreateWindow to create an overlapped window if the nWidth parameter of CreateWindow is CW_USEDEFAULT.
    /// </summary>
    public uint? YSize => (uint?)ManagementObject[nameof(YSize)];
}
#nullable disable
