/**************************************************************
 *                                                            *
 *   WARNING: This file is autogenerated by                   *
 *   System.Management.Generator.                             *
 *   Any changes made to this file will be overwritten.       *
 *                                                            *
 **************************************************************/
#nullable enable
namespace System.Management.Types.Win32;

public partial record class WMISetting(ManagementObject ManagementObject) : CIM.Setting(ManagementObject)
{
    /// <summary>
    /// Default script namespace. This property contains the namespace used by calls from the Scripting API for WMI if none is specified by the caller.
    /// </summary>
    public string? ASPScriptDefaultNamespace => (string)ManagementObject[nameof(ASPScriptDefaultNamespace)];
    /// <summary>
    /// If True, WMI scripting can be used on Active Server Pages (ASP). This property is valid on systems running unsupported versions of Windows only. For supported Windows systems, WMI scripting is always allowed on ASP.
    /// </summary>
    public bool? ASPScriptEnabled => (bool?)ManagementObject[nameof(ASPScriptEnabled)];
    /// <summary>
    /// List of fully qualified MOF file names used to initialize or recover the WMI repository. The list determines the order in which MOF files are compiled.
    /// </summary>
    public string[]? AutorecoverMofs => (string[])ManagementObject[nameof(AutorecoverMofs)];
    /// <summary>
    /// Not supported.
    /// </summary>
    public uint? AutoStartWin9X => (uint?)ManagementObject[nameof(AutoStartWin9X)];
    /// <summary>
    /// Not supported. Instead, backup the WMI repository manually.
    /// </summary>
    public uint? BackupInterval => (uint?)ManagementObject[nameof(BackupInterval)];
    /// <summary>
    /// Date and time the last backup was performed.
    /// </summary>
    public DateTimeOffset? BackupLastTime => ManagementObject.GetDateTimePropertyValue(nameof(BackupLastTime));
    /// <summary>
    /// Version information for the currently installed WMI service.
    /// </summary>
    public string? BuildVersion => (string)ManagementObject[nameof(BuildVersion)];
    /// <summary>
    /// Directory path that contains the WMI repository.
    /// </summary>
    public string? DatabaseDirectory => (string)ManagementObject[nameof(DatabaseDirectory)];
    /// <summary>
    /// Maximum size of the WMI repository.
    /// </summary>
    public uint? DatabaseMaxSize => (uint?)ManagementObject[nameof(DatabaseMaxSize)];
    /// <summary>
    /// Not supported.
    /// </summary>
    public bool? EnableAnonWin9xConnections => (bool?)ManagementObject[nameof(EnableAnonWin9xConnections)];
    /// <summary>
    /// If True, the WMI event subsystem should be enabled.
    /// </summary>
    public bool? EnableEvents => (bool?)ManagementObject[nameof(EnableEvents)];
    /// <summary>
    /// If True, WMI creates a pre-allocated heap with the size of the LastStartupHeapPreallocation value when WMI is initialized.
    /// </summary>
    public bool? EnableStartupHeapPreallocation => (bool?)ManagementObject[nameof(EnableStartupHeapPreallocation)];
    /// <summary>
    /// Maximum rate at which provider-created objects can be delivered to clients. To accommodate speed differentials between providers and clients, WMI holds objects in queues before delivering them to consumers. For more efficiency, consumers must collect the objects at a pace that matches the provider. If the memory held by uncollected objects reaches LowThresholdOnObjects, then WMI slows down the addition of new objects into the queue. If uncollected events continue to accumulate and the maximum wait to deliver events in MaxWaitOnClientObjects is reached while the memory used is at the value in HighThresholdOnClientObjects, then WMI accepts no more objects from providers and returns WBEM_E_OUT_OF_MEMORY to the clients.
    /// </summary>
    public uint? HighThresholdOnClientObjects => (uint?)ManagementObject[nameof(HighThresholdOnClientObjects)];
    /// <summary>
    /// Maximum rate at which events are to be delivered to clients. To accommodate speed differentials between providers and clients, WMI queues events before delivering them to consumers. For more efficiency, consumers must collect the events at a pace that matches the provider. If the memory held by uncollected events reaches LowThresholdOnObjects, then WMI slows down the addition of new events into the queue. If uncollected events continue to accumulate and the maximum wait to deliver events in MaxWaitOnEvents is reached while the memory used is at the value in HighThresholdOnEvents, WMI accepts no more events from providers and returns WBEM_E_OUT_OF_MEMORY to the clients.
    /// </summary>
    public uint? HighThresholdOnEvents => (uint?)ManagementObject[nameof(HighThresholdOnEvents)];
    /// <summary>
    /// Directory path where the WMI software has been installed. The default location is \System32\Wbem.
    /// </summary>
    public string? InstallationDirectory => (string)ManagementObject[nameof(InstallationDirectory)];
    /// <summary>
    /// Size of the pre-allocated heap created by WMI during initialization.
    /// </summary>
    public uint? LastStartupHeapPreallocation => (uint?)ManagementObject[nameof(LastStartupHeapPreallocation)];
    /// <summary>
    /// Directory path that contains the location of the WMI system log files.
    /// </summary>
    public string? LoggingDirectory => (string)ManagementObject[nameof(LoggingDirectory)];
    /// <summary>
    /// Enabling of event logging and the verbosity level of logging used.
    /// </summary>
    public uint? LoggingLevel => (uint?)ManagementObject[nameof(LoggingLevel)];
    /// <summary>
    /// Rate at which WMI starts to slow the creation of new objects created for clients. To accommodate speed differentials between providers and clients, WMI holds objects in queues before delivering them to consumers. For more efficiency, consumers must collect the objects at a pace that matches the provider. If the rate of requests for objects reaches LowThresholdOnClientObjects, then WMI gradually slows down the creation of new objects to match the client's rate of use. This slowdown starts when the rate at which objects are being created exceeds the value of this property. See HighThresholdOnClientObjects.
    /// </summary>
    public uint? LowThresholdOnClientObjects => (uint?)ManagementObject[nameof(LowThresholdOnClientObjects)];
    /// <summary>
    /// Rate at which WMI starts to slow the delivery of new events. To accommodate speed differentials between providers and clients, WMI queues events before delivering them to consumers. For more efficiency, consumers must collect the objects at a pace that matches the provider. If the queue grows out of control, WMI throttles—slows down—the delivery of events gradually to align with the client rate. This slowdown starts when the rate at which events are generated exceeds the value of this property. See HighThresholdOnEvents.
    /// </summary>
    public uint? LowThresholdOnEvents => (uint?)ManagementObject[nameof(LowThresholdOnEvents)];
    /// <summary>
    /// Maximum size of the log files produced by the WMI service.
    /// </summary>
    public uint? MaxLogFileSize => (uint?)ManagementObject[nameof(MaxLogFileSize)];
    /// <summary>
    /// Amount of time a newly created object waits to be used by the client before it is discarded and an error value is returned. This property interacts with the LowThresholdOnClientObjects and HighThresholdOnClientObjects properties to throttle—slow down—the delivery of objects to consumers when the consumer is receiving the objects too slowly.
    /// </summary>
    public uint? MaxWaitOnClientObjects => (uint?)ManagementObject[nameof(MaxWaitOnClientObjects)];
    /// <summary>
    /// Amount of time for which an event sent to a client is queued before being discarded. This property interacts0 with LowThresholdOnEvents and HighThresholdOnEvents to throttle—slow down—the delivery of objects to consumers when the consumer is receiving the objects too slowly.
    /// </summary>
    public uint? MaxWaitOnEvents => (uint?)ManagementObject[nameof(MaxWaitOnEvents)];
    /// <summary>
    /// Directory path for applications that install MOF files to the WMI repository. WMI automatically compiles any MOF files placed in this directory and, depending on its success, moves the MOF to a subdirectory labeled good or bad. If the # pragma autorecover command is included, the fully qualified file name is added to the AutorecoverMofs list used when WMI is initializing or recovering the repository. The list determines the order in which MOFs are compiled.
    /// </summary>
    public string? MofSelfInstallDirectory => (string)ManagementObject[nameof(MofSelfInstallDirectory)];
}
