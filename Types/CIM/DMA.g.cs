/**************************************************************
 *                                                            *
 *   WARNING: This file is autogenerated by                   *
 *   System.Management.Generator.                             *
 *   Any changes made to this file will be overwritten.       *
 *                                                            *
 **************************************************************/
#nullable enable
namespace System.Management.Types.CIM;

public partial record class DMA(ManagementObject ManagementObject) : SystemResource(ManagementObject)
{
    /// <summary>
    /// DMA channel address size, in bits. Permissible values are 8, 16, 32, and 64. If unknown, enter 0.
    /// </summary>
    public ushort? AddressSize => (ushort?)ManagementObject[nameof(AddressSize)];
    /// <summary>
    /// Availability of the DMA.
    /// </summary>
    public ushort? Availability => (ushort?)ManagementObject[nameof(Availability)];
    /// <summary>
    /// If TRUE, the DMA channel supports burst mode.
    /// </summary>
    public bool? BurstMode => (bool?)ManagementObject[nameof(BurstMode)];
    /// <summary>
    /// Indicates whether DMA can execute in count-by-byte mode.
    /// </summary>
    public ushort? ByteMode => (ushort?)ManagementObject[nameof(ByteMode)];
    /// <summary>
    /// DMA channel timing.
    /// </summary>
    public ushort? ChannelTiming => (ushort?)ManagementObject[nameof(ChannelTiming)];
    /// <summary>
    /// Name of the class or subclass used in the creation of an instance. When used with other key properties of the class, this property allows all instances of the class and its subclasses to be uniquely identified.
    /// </summary>
    public string? CreationClassName => (string)ManagementObject[nameof(CreationClassName)];
    /// <summary>
    /// Scoping computer system's creation class name.
    /// </summary>
    public string? CSCreationClassName => (string)ManagementObject[nameof(CSCreationClassName)];
    /// <summary>
    /// Scoping computer system's name.
    /// </summary>
    public string? CSName => (string)ManagementObject[nameof(CSName)];
    /// <summary>
    /// DMA channel number. This number is part of the object's key value.
    /// </summary>
    public uint? DMAChannel => (uint?)ManagementObject[nameof(DMAChannel)];
    /// <summary>
    /// Maximum number of bytes that can be transferred by this DMA channel. If unknown, enter 0 (zero).
    /// </summary>
    public uint? MaxTransferSize => (uint?)ManagementObject[nameof(MaxTransferSize)];
    /// <summary>
    /// Array that indicates all of the transfer widths, in bits, supported by this DMA channel. Permissible values are 8, 16, 32, 64, and 128 bits. If unknown, enter 0 (zero).
    /// </summary>
    public ushort[]? TransferWidths => (ushort[])ManagementObject[nameof(TransferWidths)];
    /// <summary>
    /// Indicates whether Type C (burst) timing is supported.
    /// </summary>
    public ushort? TypeCTiming => (ushort?)ManagementObject[nameof(TypeCTiming)];
    /// <summary>
    /// Indicates whether DMA can execute in count-by-word mode.
    /// </summary>
    public ushort? WordMode => (ushort?)ManagementObject[nameof(WordMode)];
}
