/**************************************************************
 *                                                            *
 *   WARNING: This file is autogenerated by                    *
 *   System.Management.Generator.                              *
 *   Any changes made to this file will be overwritten.        *
 *                                                            *
 **************************************************************/
namespace System.Management.Types.CIM;

#nullable enable
public partial record class VideoController(ManagementObject ManagementObject) : Controller(ManagementObject)
{
    /// <summary>
    /// Graphics and 3-D capabilities of the video controller.
    /// </summary>
    public ushort[]? AcceleratorCapabilities => (ushort[])ManagementObject[nameof(AcceleratorCapabilities)];
    /// <summary>
    /// Free-form strings that provide detailed descriptions for the video accelerator features indicated in the AcceleratorCapabilities array.
    /// </summary>
    public string[]? CapabilityDescriptions => (string[])ManagementObject[nameof(CapabilityDescriptions)];
    /// <summary>
    /// Number of bits used to display each pixel.
    /// </summary>
    public uint? CurrentBitsPerPixel => (uint?)ManagementObject[nameof(CurrentBitsPerPixel)];
    /// <summary>
    /// Current number of horizontal pixels.
    /// </summary>
    public uint? CurrentHorizontalResolution => (uint?)ManagementObject[nameof(CurrentHorizontalResolution)];
    /// <summary>
    /// Number of colors supported at the current resolution.
    /// </summary>
    public ulong? CurrentNumberOfColors => (ulong?)ManagementObject[nameof(CurrentNumberOfColors)];
    /// <summary>
    /// If in character mode, number of columns for the video controller; otherwise, enter 0.
    /// </summary>
    public uint? CurrentNumberOfColumns => (uint?)ManagementObject[nameof(CurrentNumberOfColumns)];
    /// <summary>
    /// If in character mode, number of rows for the video controller; otherwise, enter 0.
    /// </summary>
    public uint? CurrentNumberOfRows => (uint?)ManagementObject[nameof(CurrentNumberOfRows)];
    /// <summary>
    /// Current refresh rate, in hertz.
    /// </summary>
    public uint? CurrentRefreshRate => (uint?)ManagementObject[nameof(CurrentRefreshRate)];
    /// <summary>
    /// Current scan mode.
    /// </summary>
    public ushort? CurrentScanMode => (ushort?)ManagementObject[nameof(CurrentScanMode)];
    /// <summary>
    /// Current number of vertical pixels.
    /// </summary>
    public uint? CurrentVerticalResolution => (uint?)ManagementObject[nameof(CurrentVerticalResolution)];
    /// <summary>
    /// Maximum amount of memory supported, in bytes.
    /// </summary>
    public uint? MaxMemorySupported => (uint?)ManagementObject[nameof(MaxMemorySupported)];
    /// <summary>
    /// Maximum refresh rate of the video controller, in hertz.
    /// </summary>
    public uint? MaxRefreshRate => (uint?)ManagementObject[nameof(MaxRefreshRate)];
    /// <summary>
    /// Minimum refresh rate of the video controller, in hertz.
    /// </summary>
    public uint? MinRefreshRate => (uint?)ManagementObject[nameof(MinRefreshRate)];
    /// <summary>
    /// Number of video pages supported given the current resolutions and available memory.
    /// </summary>
    public uint? NumberOfVideoPages => (uint?)ManagementObject[nameof(NumberOfVideoPages)];
    /// <summary>
    /// Type of video memory.
    /// </summary>
    public ushort? VideoMemoryType => (ushort?)ManagementObject[nameof(VideoMemoryType)];
    /// <summary>
    /// Free-form string that describes the video processor or controller.
    /// </summary>
    public string? VideoProcessor => (string)ManagementObject[nameof(VideoProcessor)];
}
#nullable disable
