/**************************************************************
 *                                                            *
 *   WARNING: This file is autogenerated by                   *
 *   System.Management.Generator.                             *
 *   Any changes made to this file will be overwritten.       *
 *                                                            *
 **************************************************************/
#nullable enable
namespace System.Management.Types.CIM;

public partial record class OperatingSystem(ManagementObject ManagementObject) : Base._Object(ManagementObject)
{
    /// <summary>
    /// Name of the class or subclass used in the creation of an instance. When used with other key properties of the class, this property allows all instances of the class and its subclasses to be uniquely identified.
    /// </summary>
    public string? CreationClassName => (string)ManagementObject[nameof(CreationClassName)];
    /// <summary>
    /// Scoping computer system's creation class name.
    /// </summary>
    public string? CSCreationClassName => (string)ManagementObject[nameof(CSCreationClassName)];
    /// <summary>
    /// Scoping computer system's name.
    /// </summary>
    public string? CSName => (string)ManagementObject[nameof(CSName)];
    /// <summary>
    /// Number of minutes the operating system is offset from Greenwich Mean Time (GMT). The number is positive, negative, or zero.
    /// </summary>
    public short? CurrentTimeZone => (short?)ManagementObject[nameof(CurrentTimeZone)];
    /// <summary>
    /// If TRUE, the operating system is distributed across several computer system nodes, which should be grouped as a cluster.
    /// </summary>
    public bool? Distributed => (bool?)ManagementObject[nameof(Distributed)];
    /// <summary>
    /// Number of kilobytes of physical memory currently unused and available.
    /// </summary>
    public ulong? FreePhysicalMemory => (ulong?)ManagementObject[nameof(FreePhysicalMemory)];
    /// <summary>
    /// Number of kilobytes that can be mapped into the operating system's paging files without causing other pages to be swapped out. A value of 0 indicates that there are no paging files.
    /// </summary>
    public ulong? FreeSpaceInPagingFiles => (ulong?)ManagementObject[nameof(FreeSpaceInPagingFiles)];
    /// <summary>
    /// Number of kilobytes of virtual memory currently unused and available. For example, this can be calculated by adding the amount of free RAM to the amount of free paging space (that is, adding the FreePhysicalMemory and FreeSpaceInPagingFiles properties).
    /// </summary>
    public ulong? FreeVirtualMemory => (ulong?)ManagementObject[nameof(FreeVirtualMemory)];
    /// <summary>
    /// Time when the operating system was last booted.
    /// </summary>
    public DateTimeOffset? LastBootUpTime => ManagementObject.GetDateTimePropertyValue(nameof(LastBootUpTime));
    /// <summary>
    /// Operating system's notion of the local date and time of day.
    /// </summary>
    public DateTimeOffset? LocalDateTime => ManagementObject.GetDateTimePropertyValue(nameof(LocalDateTime));
    /// <summary>
    /// Maximum number of process contexts the operating system can support. If there is no fixed maximum, the value should be 0 (zero). On systems that have a fixed maximum, this object can help diagnose failures that occur when the maximum is reached. If unknown, enter -1.
    /// </summary>
    public uint? MaxNumberOfProcesses => (uint?)ManagementObject[nameof(MaxNumberOfProcesses)];
    /// <summary>
    /// Maximum number of kilobytes of memory that can be allocated to a process. For operating systems with no virtual memory, this value is typically equal to the total amount of physical memory, minus memory used by the BIOS and the operating system. For some operating systems, this value can be infinity, in which case 0 should be entered. In other cases, this value can be a constant, for example, 2 GB or 4 GB.
    /// </summary>
    public ulong? MaxProcessMemorySize => (ulong?)ManagementObject[nameof(MaxProcessMemorySize)];
    /// <summary>
    /// Number of user licenses for the operating system. If unlimited, enter 0, if unknown, enter -1.
    /// </summary>
    public uint? NumberOfLicensedUsers => (uint?)ManagementObject[nameof(NumberOfLicensedUsers)];
    /// <summary>
    /// Number of process contexts currently loaded or running on the operating system.
    /// </summary>
    public uint? NumberOfProcesses => (uint?)ManagementObject[nameof(NumberOfProcesses)];
    /// <summary>
    /// Number of user sessions for which the operating system is currently storing state information.
    /// </summary>
    public uint? NumberOfUsers => (uint?)ManagementObject[nameof(NumberOfUsers)];
    /// <summary>
    /// Type of operating system.
    /// </summary>
    public ushort? OSType => (ushort?)ManagementObject[nameof(OSType)];
    /// <summary>
    /// Describes the manufacturer and operating system type when the OSType property is set to 1 ("Other"). The format of the string inserted in OtherTypeDescription should be similar to the Values strings defined for OSType. This property should be set to null when OSType is a value other than 1 (one).
    /// </summary>
    public string? OtherTypeDescription => (string)ManagementObject[nameof(OtherTypeDescription)];
    /// <summary>
    /// Number of kilobytes that can be stored in the operating system's paging files. This number does not represent the actual physical size of the paging file on disk. A value of 0 (zero)indicates that there are no paging files.
    /// </summary>
    public ulong? SizeStoredInPagingFiles => (ulong?)ManagementObject[nameof(SizeStoredInPagingFiles)];
    /// <summary>
    /// Total swap space, in kilobytes. This value can be null (unspecified) if swap space is not distinguished from page files. However, some operating systems distinguish these concepts. For example, entire processes can be "swapped out" in UNIX when the free page list falls and remains below a specified amount.
    /// </summary>
    public ulong? TotalSwapSpaceSize => (ulong?)ManagementObject[nameof(TotalSwapSpaceSize)];
    /// <summary>
    /// Number of kilobytes of virtual memory. For example, calculate this by adding the amount of total RAM to the amount of paging space (that is, add the amount of memory in or aggregated by the computer system to the SizeStoredInPagingFiles property.
    /// </summary>
    public ulong? TotalVirtualMemorySize => (ulong?)ManagementObject[nameof(TotalVirtualMemorySize)];
    /// <summary>
    /// Total amount of physical memory, in kilobytes, available to the operating system. This value does not necessarily indicate the true amount of physical memory, but what is reported to the operating system as available to it.
    /// </summary>
    public ulong? TotalVisibleMemorySize => (ulong?)ManagementObject[nameof(TotalVisibleMemorySize)];
    /// <summary>
    /// Version of the operation.
    /// </summary>
    public string? Version => (string)ManagementObject[nameof(Version)];
}
