/**************************************************************
 *                                                            *
 *   WARNING: This file is autogenerated by                   *
 *   System.Management.Generator.                             *
 *   Any changes made to this file will be overwritten.       *
 *                                                            *
 **************************************************************/
#nullable enable
namespace System.Management.Types.CIM;

public partial record class CacheMemory(ManagementObject ManagementObject) : Memory(ManagementObject)
{
    /// <summary>
    /// Enumeration that defines the system cache associativity.
    /// </summary>
    public ushort? Associativity => (ushort?)ManagementObject[nameof(Associativity)];
    /// <summary>
    /// Specifies instruction caching, data caching, or both. "Other" and "Unknown" also can be defined.
    /// </summary>
    public ushort? CacheType => (ushort?)ManagementObject[nameof(CacheType)];
    /// <summary>
    /// Maximum amount of time, in seconds, dirty lines or buckets may remain in the cache before they are flushed. A value of 0 indicates that a cache flush is not controlled by a flushing timer.
    /// </summary>
    public uint? FlushTimer => (uint?)ManagementObject[nameof(FlushTimer)];
    /// <summary>
    /// Specifies whether this is the primary, secondary or tertiary cache. "Other", "Unknown", and "Not Applicable" also can be defined.
    /// </summary>
    public ushort? Level => (ushort?)ManagementObject[nameof(Level)];
    /// <summary>
    /// Size, in bytes, of a single cache bucket or line.
    /// </summary>
    public uint? LineSize => (uint?)ManagementObject[nameof(LineSize)];
    /// <summary>
    /// Policy employed by the cache for handling read requests. If the read policy is determined individually, that is, for each request, then the value 6 ("Determination per I/O") should be specified. "Other" and "Unknown" are also valid values.
    /// </summary>
    public ushort? ReadPolicy => (ushort?)ManagementObject[nameof(ReadPolicy)];
    /// <summary>
    /// Integer enumeration describing the algorithm that determines which cache lines or buckets should be re-used.
    /// </summary>
    public ushort? ReplacementPolicy => (ushort?)ManagementObject[nameof(ReplacementPolicy)];
    /// <summary>
    /// Defines whether the cache is write-back or write-through, or whether the information "Varies with Address" or is defined individually for each input/output. "Other" and "Unknown" also can be specified.
    /// </summary>
    public ushort? WritePolicy => (ushort?)ManagementObject[nameof(WritePolicy)];
}
