/**************************************************************
 *                                                            *
 *   WARNING: This file is autogenerated by                    *
 *   System.Management.Generator.                              *
 *   Any changes made to this file will be overwritten.        *
 *                                                            *
 **************************************************************/
namespace System.Management.Types.CIM;

#nullable enable
public partial record class PotsModem(ManagementObject ManagementObject) : LogicalDevice(ManagementObject)
{
    /// <summary>
    /// Current auto-answer or call-back setting for the modem.
    /// </summary>
    public ushort? AnswerMode => (ushort?)ManagementObject[nameof(AnswerMode)];
    /// <summary>
    /// Data compression characteristics of the modem.
    /// </summary>
    public ushort? CompressionInfo => (ushort?)ManagementObject[nameof(CompressionInfo)];
    /// <summary>
    /// Countries or regions in which the modem can operate.
    /// </summary>
    public string[]? CountriesSupported => (string[])ManagementObject[nameof(CountriesSupported)];
    /// <summary>
    /// Country or region for which the modem is currently programmed. When multiple countries or regions are supported, this property defines which one is currently selected for use.
    /// </summary>
    public string? CountrySelected => (string)ManagementObject[nameof(CountrySelected)];
    /// <summary>
    /// Currently defined passwords for the modem. This array can be left blank for security reasons.
    /// </summary>
    public string[]? CurrentPasswords => (string[])ManagementObject[nameof(CurrentPasswords)];
    /// <summary>
    /// Type of dialing that is used.
    /// </summary>
    public ushort? DialType => (ushort?)ManagementObject[nameof(DialType)];
    /// <summary>
    /// Error correction characteristics of the modem.
    /// </summary>
    public ushort? ErrorControlInfo => (ushort?)ManagementObject[nameof(ErrorControlInfo)];
    /// <summary>
    /// Time limit (in seconds) for automatic disconnection of the phone line if no data is exchanged. A value of 0 (zero) indicates that this feature is present but not enabled.
    /// </summary>
    public uint? InactivityTimeout => (uint?)ManagementObject[nameof(InactivityTimeout)];
    /// <summary>
    /// Maximum settable communication speed for accessing the phone system.
    /// </summary>
    public uint? MaxBaudRateToPhone => (uint?)ManagementObject[nameof(MaxBaudRateToPhone)];
    /// <summary>
    /// Maximum settable communication speed to the COM port for an external modem. Enter 0 (zero) if not applicable.
    /// </summary>
    public uint? MaxBaudRateToSerialPort => (uint?)ManagementObject[nameof(MaxBaudRateToSerialPort)];
    /// <summary>
    /// Maximum number of passwords definable in the modem itself. If this feature is not supported, enter 0 (zero).
    /// </summary>
    public ushort? MaxNumberOfPasswords => (ushort?)ManagementObject[nameof(MaxNumberOfPasswords)];
    /// <summary>
    /// Modulation scheme of the modem.
    /// </summary>
    public ushort? ModulationScheme => (ushort?)ManagementObject[nameof(ModulationScheme)];
    /// <summary>
    /// Number of rings before the modem answers an incoming call.
    /// </summary>
    public byte? RingsBeforeAnswer => (byte?)ManagementObject[nameof(RingsBeforeAnswer)];
    /// <summary>
    /// Volume level of the audible tones from the modem. For example, high, medium, or low volume can be reported.
    /// </summary>
    public ushort? SpeakerVolumeInfo => (ushort?)ManagementObject[nameof(SpeakerVolumeInfo)];
    /// <summary>
    /// If TRUE, the modem supports call-back.
    /// </summary>
    public bool? SupportsCallback => (bool?)ManagementObject[nameof(SupportsCallback)];
    /// <summary>
    /// If TRUE, synchronous, as well as asynchronous, communication is supported.
    /// </summary>
    public bool? SupportsSynchronousConnect => (bool?)ManagementObject[nameof(SupportsSynchronousConnect)];
    /// <summary>
    /// Date and time this controller was last reset. This could mean the controller was powered down, or reinitialized.
    /// </summary>
    public DateTimeOffset? TimeOfLastReset => ManagementObject.GetDateTimePropertyValue(nameof(TimeOfLastReset));
}
#nullable disable
