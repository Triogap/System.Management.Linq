/**************************************************************
 *                                                            *
 *   WARNING: This file is autogenerated by                   *
 *   System.Management.Generator.                             *
 *   Any changes made to this file will be overwritten.       *
 *                                                            *
 **************************************************************/
#nullable enable
namespace System.Management.Types.CIM;

public partial record class Process(ManagementObject ManagementObject) : LogicalElement(ManagementObject)
{
    /// <summary>
    /// Name of the class or subclass used in the creation of an instance. When used with other key properties of the class, this property allows all instances of the class and its subclasses to be uniquely identified.
    /// </summary>
    public string? CreationClassName => (string)ManagementObject[nameof(CreationClassName)];
    /// <summary>
    /// Time that the process began executing.
    /// </summary>
    public DateTimeOffset? CreationDate => ManagementObject.GetDateTimePropertyValue(nameof(CreationDate));
    /// <summary>
    /// Scoping computer system's creation class name.
    /// </summary>
    public string? CSCreationClassName => (string)ManagementObject[nameof(CSCreationClassName)];
    /// <summary>
    /// Scoping computer system's name.
    /// </summary>
    public string? CSName => (string)ManagementObject[nameof(CSName)];
    /// <summary>
    /// Current operating condition of the process.
    /// </summary>
    public ushort? ExecutionState => (ushort?)ManagementObject[nameof(ExecutionState)];
    /// <summary>
    /// Identifies the process. A process identifier is a kind of process handle.
    /// </summary>
    public string? Handle => (string)ManagementObject[nameof(Handle)];
    /// <summary>
    /// Time in kernel mode, in 100 nanosecond units. If this information is not available, a value of 0 (zero) should be used.
    /// </summary>
    public ulong? KernelModeTime => (ulong?)ManagementObject[nameof(KernelModeTime)];
    /// <summary>
    /// Scoping operating system's creation class name.
    /// </summary>
    public string? OSCreationClassName => (string)ManagementObject[nameof(OSCreationClassName)];
    /// <summary>
    /// Scoping operating system's name.
    /// </summary>
    public string? OSName => (string)ManagementObject[nameof(OSName)];
    /// <summary>
    /// Urgency or importance for process execution. If a priority is not defined for a process, a value of 0 (zero) should be used.
    /// </summary>
    public uint? Priority => (uint?)ManagementObject[nameof(Priority)];
    /// <summary>
    /// Time that the process was stopped or terminated.
    /// </summary>
    public DateTimeOffset? TerminationDate => ManagementObject.GetDateTimePropertyValue(nameof(TerminationDate));
    /// <summary>
    /// Time in user mode, in 100 nanosecond units. If this information is not available, a value of 0 (zero) should be used.
    /// </summary>
    public ulong? UserModeTime => (ulong?)ManagementObject[nameof(UserModeTime)];
    /// <summary>
    /// Amount of memory, in bytes, that a process needs to execute efficiently for an operating system that uses page-based memory management. If the system does not have enough memory (less than the working set size), thrashing occurs. If the size of the working set is not known, use NULL or 0 (zero). If working set data is provided, you can monitor the information to understand the changing memory requirements of a process.
    /// </summary>
    public ulong? WorkingSetSize => (ulong?)ManagementObject[nameof(WorkingSetSize)];
}
