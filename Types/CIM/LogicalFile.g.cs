/**************************************************************
 *                                                            *
 *   WARNING: This file is autogenerated by                   *
 *   System.Management.Generator.                             *
 *   Any changes made to this file will be overwritten.       *
 *                                                            *
 **************************************************************/
#nullable enable
namespace System.Management.Types.CIM;

public partial record class LogicalFile(ManagementObject ManagementObject) : LogicalElement(ManagementObject)
{
    /// <summary>
    /// Bitmask that represents the access rights required to access or perform specific operations on the file. For bit values, see File and Directory Access Rights Constants.
    /// </summary>
    public uint? AccessMask => (uint?)ManagementObject[nameof(AccessMask)];
    /// <summary>
    /// If True, the file should be archived.
    /// </summary>
    public bool? Archive => (bool?)ManagementObject[nameof(Archive)];
    /// <summary>
    /// If True, the file is compressed.
    /// </summary>
    public bool? Compressed => (bool?)ManagementObject[nameof(Compressed)];
    /// <summary>
    /// Free-form string that indicates the algorithm or tool used to compress the logical file. If the compression scheme is unknown or not described, use "Unknown". If the logical file is compressed, but the compression scheme is unknown or not described, use "Compressed". If the logical file is not compressed, use "Not Compressed".
    /// </summary>
    public string? CompressionMethod => (string)ManagementObject[nameof(CompressionMethod)];
    /// <summary>
    /// Name of the class.
    /// </summary>
    public string? CreationClassName => (string)ManagementObject[nameof(CreationClassName)];
    /// <summary>
    /// Date and time of the file's creation.
    /// </summary>
    public DateTimeOffset? CreationDate => ManagementObject.GetDateTimePropertyValue(nameof(CreationDate));
    /// <summary>
    /// Class of the computer system.
    /// </summary>
    public string? CSCreationClassName => (string)ManagementObject[nameof(CSCreationClassName)];
    /// <summary>
    /// Name of the computer system.
    /// </summary>
    public string? CSName => (string)ManagementObject[nameof(CSName)];
    public string? EightDotThreeFileName => (string)ManagementObject[nameof(EightDotThreeFileName)];
    /// <summary>
    /// If True, the file is encrypted.
    /// </summary>
    public bool? Encrypted => (bool?)ManagementObject[nameof(Encrypted)];
    /// <summary>
    /// Free-form string that identifies the algorithm or tool used to encrypt a logical file. If the encryption scheme is not indulged (for security reasons, for example), use "Unknown". If the file is encrypted, but either its encryption scheme is unknown or not disclosed, use "Encrypted". If the logical file is not encrypted, use "Not Encrypted".
    /// </summary>
    public string? EncryptionMethod => (string)ManagementObject[nameof(EncryptionMethod)];
    public new string? Name => (string)ManagementObject[nameof(Name)];
    public string? Extension => (string)ManagementObject[nameof(Extension)];
    public string? FileName => (string)ManagementObject[nameof(FileName)];
    /// <summary>
    /// Size of the file, in bytes.
    /// </summary>
    public ulong? FileSize => (ulong?)ManagementObject[nameof(FileSize)];
    /// <summary>
    /// Descriptor that represents the file type indicated by the Extension property.
    /// </summary>
    public string? FileType => (string)ManagementObject[nameof(FileType)];
    /// <summary>
    /// Class of the file system.
    /// </summary>
    public string? FSCreationClassName => (string)ManagementObject[nameof(FSCreationClassName)];
    /// <summary>
    /// Name of the file system.
    /// </summary>
    public string? FSName => (string)ManagementObject[nameof(FSName)];
    /// <summary>
    /// If True, the file is hidden.
    /// </summary>
    public bool? Hidden => (bool?)ManagementObject[nameof(Hidden)];
    /// <summary>
    /// Number of "file opens" that are currently active against the file.
    /// </summary>
    public ulong? InUseCount => (ulong?)ManagementObject[nameof(InUseCount)];
    /// <summary>
    /// Date and time the file was last accessed.
    /// </summary>
    public DateTimeOffset? LastAccessed => ManagementObject.GetDateTimePropertyValue(nameof(LastAccessed));
    /// <summary>
    /// Date and time the file was last modified.
    /// </summary>
    public DateTimeOffset? LastModified => ManagementObject.GetDateTimePropertyValue(nameof(LastModified));
    public string? Path => (string)ManagementObject[nameof(Path)];
    /// <summary>
    /// If True, the file can be read.
    /// </summary>
    public bool? Readable => (bool?)ManagementObject[nameof(Readable)];
    /// <summary>
    /// If True, the file is a system file.
    /// </summary>
    public bool? System => (bool?)ManagementObject[nameof(System)];
    /// <summary>
    /// If True, the file can be written.
    /// </summary>
    public bool? Writeable => (bool?)ManagementObject[nameof(Writeable)];
}
